let core
window.onload = ()=>{

	let fi = new Range({ width: 400, value: 0.0001, class: `input`, min: 0.0001, max: Math.PI * 2, scale: 4, label: `Phi`, labelWidth: 160})
	let theta = new Range({ width: 400, value: 0.0001, class: `input`, min: 0.0001, max: Math.PI, scale: 2, label: `Theta`, labelWidth: 160})
	let one = new Button({n: `| 0 ⟩`, class: `toggle`})
	let zero = new Button({n: `| 1 ⟩`, class: `toggle`})
	let xgate = new Button({n: `Pauli-X`, class: `toggle`})
	let ygate = new Button({n: `Pauli-Y`, class: `toggle`})
	let zgate = new Button({n: `Pauli-Z`, class: `toggle`})
	let hgate = new Button({n: `Hadamard gate`, class: `toggle`})
	let controls = document.createElement(`div`)
	controls.classList.add(`controls`)

	core = new Core(fi, theta, controls);
	document.body.appendChild(controls)
	controls.appendChild(fi)
	controls.appendChild(theta)
	controls.appendChild(one)
	controls.appendChild(zero)
	controls.appendChild(xgate)
	controls.appendChild(ygate)
	controls.appendChild(zgate)
	controls.appendChild(hgate)

	fi.data.onchange = v=>{
		core.state.fiTarget = core.state.thetaTarget = undefined
		core.state.fi = v
	}
	theta.data.onchange = v=>{
		core.state.fiTarget = core.state.thetaTarget = undefined
		core.state.theta = v
	}
	one.data.onchange = v=>{
		core.state.thetaTarget = 0
		core.state.fiTarget = 0
	}
	zero.data.onchange = v=>{
		core.state.thetaTarget = Math.PI
		core.state.fiTarget = 0
	}
	xgate.data.onchange = v=>{
		// core.state.thetaTarget = Math.PI - core.state.thetaTarget
		// core.state.fiTarget = Math.PI * 2 - core.state.fiTarget
		// if (core.state.fi < Math.PI / 2) core.state.fi += Math.PI * 2; else if (core.state.fi > Math.PI / 2 * 3) core.state.fi -= Math.PI * 2

		// core.resolve = `x`
		// core.state.gx = (core.state.gx + Math.PI) % (Math.PI * 2)

		core.applyXGate()
	}
	ygate.data.onchange = v=>{
		// core.state.thetaTarget = Math.PI-core.state.thetaTarget
		// core.state.fiTarget = Math.PI - core.state.fiTarget < 0 ? Math.PI * 3 - core.state.fiTarget : Math.PI - core.state.fiTarget
		// core.state.gy = (core.state.gy + Math.PI) % (Math.PI * 2)

		core.applyYGate()
	}
	zgate.data.onchange = v=>{
		// core.state.fiTarget = core.state.fiTarget + Math.PI > Math.PI * 2 ? core.state.fiTarget - Math.PI : core.state.fiTarget + Math.PI
		// core.state.gz = (core.state.gz + Math.PI) % (Math.PI * 2)
		core.applyZGate()
	}
	hgate.data.onchange = v=>{
		// core.state.thetaTarget = Math.PI / 2 - core.state.thetaTarget
		// core.state.fiTarget = Math.PI * 2 - core.state.fiTarget
		// core.state.gz = (core.state.gz + Math.PI) % (Math.PI * 2)
		// core.state.gy = (core.state.gy + Math.PI / 2) % (Math.PI * 2)
		core.applyHGate()
	}

	xgate.addEventListener('mouseenter', ()=>{
		core.highlight(`x`)
	})
	xgate.addEventListener('mouseleave', ()=>{
		core.highlight()
	})
	ygate.addEventListener('mouseenter', ()=>{
		core.highlight(`z`)
	})
	ygate.addEventListener('mouseleave', ()=>{
		core.highlight()
	})
	zgate.addEventListener('mouseenter', ()=>{
		core.highlight(`y`)
	})
	zgate.addEventListener('mouseleave', ()=>{
		core.highlight()
	})

}

class Core {

	constructor(fi, theta, controls){
		this.ratio = devicePixelRatio || 1
		this.w = 640
		this.h = 480

		this.fiControl = fi
		this.thetaControl = theta
		this.controls = controls

		this.reach = true

		//DATA
		this.state = {
			fi: .0001,
			theta: .0001,
			gx: 0,
			gy: 0,
			gz: 0
		}

		this.setup()
		this.addShapes()
		this.addStateString()
		this.render()
		this.addLabels()
	}

	applyXGate(){

		this.lockControls(true)

		core.state.gx = (core.state.gx + Math.PI) % (Math.PI * 2)

		let xyz = this.xyzFromP(this.state.fi, this.state.theta)
		let vec = new THREE.Vector3(xyz.x, xyz.y, xyz.z)
		let m = new THREE.Matrix3()
		// m.set(1, 0, 0, 0, -1, 0, 0, 0, -1)
		// vec.applyMatrix3(m)
		vec.applyAxisAngle(new THREE.Vector3(1,0,0), Math.PI)
		let p = this.pFromXyz(vec.x, vec.y, vec.z)
		this.state.fiNext = p.fi
		this.state.thetaNext = p.theta

	}

	applyYGate(){

		this.lockControls(true)

		core.state.gy = (core.state.gy + Math.PI) % (Math.PI * 2)

		let xyz = this.xyzFromP(this.state.fi, this.state.theta)
		let vec = new THREE.Vector3(xyz.x, xyz.y, xyz.z)
		let m = new THREE.Matrix3()
		// m.set(0, 0, -1, 0, 1, 0, 1, 0, 0)
		// vec.applyMatrix3(m)
		vec.applyAxisAngle(new THREE.Vector3(0,1,0), Math.PI)
		let p = this.pFromXyz(vec.x, vec.y, vec.z)
		this.state.fiNext = p.fi
		this.state.thetaNext = p.theta


	}

	applyZGate(){

		this.lockControls(true)

		core.state.gz = (core.state.gz + Math.PI) % (Math.PI * 2)

		let xyz = this.xyzFromP(this.state.fi, this.state.theta)
		let vec = new THREE.Vector3(xyz.x, xyz.y, xyz.z)
		let m = new THREE.Matrix3()
		// m.set(0, 0, -1, 0, 1, 0, 1, 0, 0)
		// vec.applyMatrix3(m)
		vec.applyAxisAngle(new THREE.Vector3(0,0,1), Math.PI)
		let p = this.pFromXyz(vec.x, vec.y, vec.z)
		this.state.fiNext = p.fi
		this.state.thetaNext = p.theta


	}

	applyHGate(){

		this.lockControls(true)

		core.state.gz = (core.state.gz + Math.PI) % (Math.PI * 2)

		let xyz = this.xyzFromP(this.state.fi, this.state.theta)
		let vec = new THREE.Vector3(xyz.x, xyz.y, xyz.z)
		let m = new THREE.Matrix3()
		// m.set(0, 0, -1, 0, 1, 0, 1, 0, 0)
		// vec.applyMatrix3(m)
		vec.applyAxisAngle(new THREE.Vector3(0,0,1), Math.PI)
		let p = this.pFromXyz(vec.x, vec.y, vec.z)
		this.state.fiNext = p.fi
		this.state.thetaNext = p.theta
		this.sequence = _=>{this.applyHGate2()}

	}

	applyHGate2(){

		this.lockControls(true)

		core.state.gy = (core.state.gy + Math.PI / 2) % (Math.PI * 2)

		let xyz = this.xyzFromP(this.state.fi, this.state.theta)
		let vec = new THREE.Vector3(xyz.x, xyz.y, xyz.z)
		let m = new THREE.Matrix3()
		// m.set(0, 0, -1, 0, 1, 0, 1, 0, 0)
		// vec.applyMatrix3(m)
		vec.applyAxisAngle(new THREE.Vector3(0,1,0), Math.PI / 2)
		let p = this.pFromXyz(vec.x, vec.y, vec.z)
		this.state.fiNext = p.fi
		this.state.thetaNext = p.theta


	}

	highlight(axe){
		if (axe === `x`){
			this.ax.material = this.highlightMat
		} else if (axe === `y`){
			this.ay.material = this.highlightMat
		} else if (axe === `z`){
			this.az.material = this.highlightMat
		} else {
			this.ax.material = this.axisMat
			this.ay.material = this.axisMat
			this.az.material = this.axisMat
		}
	}

	lockControls(b){
		if (b) {
			this.controls.classList.add(`disabled`)
			// this.thetaControl.classList.add('disabled')
			// this.fiControl.classList.add('disabled')
		} else {
			this.controls.classList.remove(`disabled`)
			// this.thetaControl.classList.remove('disabled')
			// this.fiControl.classList.remove('disabled')
		}
	}

	addLabels(){
		this.up = document.createElement(`div`)
		this.up.style.position = `absolute`
		let xy = this.getScreenUV(new THREE.Vector3(0, 1.3, 0))
		this.up.style.top = xy.y * this.h + `px`
		this.up.style.left = xy.x * this.w + `px`
		this.up.style.textAlign = `center`
		this.up.style.color = `#fff`
		this.up.innerText = `| 0 ⟩`
		document.body.appendChild(this.up)

		this.down = document.createElement(`div`)
		this.down.style.position = `absolute`
		xy = this.getScreenUV(new THREE.Vector3(0, -1.3, 0))
		this.down.style.top = xy.y * this.h + `px`
		this.down.style.left = xy.x * this.w + `px`
		this.down.style.textAlign = `center`
		this.down.style.color = `#fff`
		this.down.innerText = `| 1 ⟩`
		document.body.appendChild(this.down)

		this.positiveX = document.createElement(`div`)
		this.positiveX.style.position = `absolute`
		xy = this.getScreenUV(new THREE.Vector3(-1.1, 0, 0))
		this.positiveX.style.top = xy.y * this.h + `px`
		this.positiveX.style.left = xy.x * this.w + `px`
		this.positiveX.style.textAlign = `center`
		this.positiveX.style.color = `#fff`
		this.positiveX.innerText = `x`
		document.body.appendChild(this.positiveX)

		this.positiveY = document.createElement(`div`)
		this.positiveY.style.position = `absolute`
		xy = this.getScreenUV(new THREE.Vector3(0, 0, 1.1))
		this.positiveY.style.top = xy.y * this.h + `px`
		this.positiveY.style.left = xy.x * this.w + `px`
		this.positiveY.style.textAlign = `center`
		this.positiveY.style.color = `#fff`
		this.positiveY.innerText = `y`
		document.body.appendChild(this.positiveY)

	}

	addStateString(){
		this.expression = document.createElement(`div`)
		this.expression.style.position = `absolute`
		this.expression.style.top = `10px`
		this.expression.style.left = `10px`
		this.expression.style.color = `#fff`
		this.expression.innerText = `| 0 ⟩`
		document.body.appendChild(this.expression)
	}

	setup(){

		this.scene = new THREE.Scene()
		this.camera = new THREE.PerspectiveCamera(10, this.w / this.h, .1, 100)
		this.camera.position.set(-10,10,10)
		this.camera.lookAt(0, 0, 0)
		this.renderer = new THREE.WebGLRenderer()
		this.renderer.setClearColor(0x111122)
		this.renderer.setSize(this.w, this.h)
		this.renderer.setPixelRatio(this.ratio)
		document.body.appendChild(this.renderer.domElement)

	}

	addShapes(){

		//LIGHTS
		let alight = new THREE.HemisphereLight(0xA66464, 0x2211AA, .9)
		this.scene.add(alight)
		let dlight = new THREE.DirectionalLight(0xffffFF, .9)
		dlight.position.set(6, 6, -16)
		this.scene.add(dlight)

		//MATERIALS
		// this.sphereMat = new THREE.MeshPhysicalMaterial({
		// 	color: 0xFFFFFF,
		// 	roughness: .6,
		// 	transparent: true,
		// 	transparency: .9
		// })

		this.sphereMat = new THREE.MeshNormalMaterial({transparent: true, opacity: .2})
		this.arrowMat = new THREE.MeshStandardMaterial({color: 0xFFFFFF, side: THREE.DoubleSide})
		this.circleMat = new THREE.LineBasicMaterial({color: 0xAABBff})
		this.axisMat = new THREE.LineBasicMaterial({color: 0xFFFFFF, transparent: true, opacity: .2})
		this.highlightMat = new THREE.LineBasicMaterial({color: 0xFFFF00})
		this.circleMat.depthTest = this.axisMat.depthTest = this.highlightMat.depthTest = false

		//ROTATION GROUPS
		this.ext = new THREE.Group()
		this.scene.add(this.ext)

		this.int = new THREE.Group()
		this.ext.add(this.int)

		//Sphere
		this.sphere = new THREE.Mesh(new THREE.SphereBufferGeometry(1,64,64), this.sphereMat)
		this.scene.add(this.sphere)

		//Vector
		this.vector = new THREE.Vector3(0, 1, 0)
		this.arrow = new THREE.Mesh(new THREE.CylinderBufferGeometry(.02, .02, .7, 6, 1, false), this.arrowMat)
		this.arrow.position.set(0, .35, 0)
		this.cone = new THREE.Mesh(new THREE.ConeBufferGeometry(.04, .3), this.arrowMat)
		this.cone.position.set(0, .85, 0)
		this.int.add(this.arrow)
		this.int.add(this.cone)

		//Disk
		this.disk = new THREE.Mesh(new THREE.CircleBufferGeometry(.04, 32), this.arrowMat)
		this.disk.rotation.x = -Math.PI/2
		this.disk.position.set(0, 1, 0)
		this.int.add(this.disk)

		//Circles
		let circle = new THREE.CircleGeometry(1, 48)
		circle.vertices.shift()
		this.circleTheta = new THREE.LineLoop(circle, this.circleMat)
		this.int.add(this.circleTheta)

		this.circleFi = new THREE.LineLoop(circle, this.circleMat)
		this.circleFi.rotation.x = Math.PI / 2
		this.ext.add(this.circleFi)

		//Axes
		let ax = [new THREE.Vector3(-1,0,0), new THREE.Vector3(1,0,0)]
		this.ax = new THREE.Line(new THREE.BufferGeometry().setFromPoints(ax), this.axisMat)
		this.ext.add(this.ax)

		let ay = [new THREE.Vector3(0,-1,0), new THREE.Vector3(0,1,0)]
		this.ay = new THREE.Line(new THREE.BufferGeometry().setFromPoints(ay), this.axisMat)
		this.ext.add(this.ay)

		let az = [new THREE.Vector3(0,0,-1), new THREE.Vector3(0,0,1)]
		this.az = new THREE.Line(new THREE.BufferGeometry().setFromPoints(az), this.axisMat)
		this.ext.add(this.az)



	}
	
	getScreenUV(v){
		v = v.clone()
		v.project(this.camera)
		return {x: v.x * .5 + .5, y: -v.y * .5 + .5}
	}

	render(){

		requestAnimationFrame(this.render.bind(this))
		this.update()
		this.renderer.render(this.scene, this.camera)

	}

	// vFromP(fi, theta){
	// 	return {x: [Math.cos(theta / 2), 0], y: [Math.sin(theta / 2) * Math.cos(fi), Math.sin(theta / 2) * Math.sin(fi)]}
	// }
	xyzFromP(fi, theta){
		return {x: Math.cos(fi) * Math.sin(theta), y: Math.sin(fi) * Math.sin(theta), z: Math.cos(theta)}
	}
	pFromXyz(x, y, z){
		let fi = Math.atan2(y,x)
		return {fi: fi < 0 ? fi + Math.PI * 2 : fi, theta: Math.acos(z)}
	}

	resetExt(){
		this.state.gx = this.state.gy = this.state.gz = 0
		this.ext.rotation.set(0, 0, 0)
	}

	update(){

		if (Math.abs(this.state.gx - this.ext.rotation.x) > .001 || Math.abs(this.state.gy - this.ext.rotation.z) > .001 || Math.abs(this.state.gz - this.ext.rotation.y) > .001){
			this.reach = false
			this.ext.rotation.x = this.ext.rotation.x + (this.state.gx - this.ext.rotation.x) * .08
			this.ext.rotation.z = this.ext.rotation.z + (this.state.gy - this.ext.rotation.z) * .08
			this.ext.rotation.y = this.ext.rotation.y + (this.state.gz - this.ext.rotation.y) * .08
		} else if (!this.reach){
			this.reach = true
			this.resetExt()
			this.state.theta = this.state.thetaNext
			this.state.fi = this.state.fiNext
			this.thetaControl.data.update(this.state.theta)
			this.fiControl.data.update(this.state.fi)
			this.lockControls(false)

			if (this.sequence){
				this.sequence()
				this.sequence = false
			}
				
		}

		if (this.state.thetaTarget !== undefined || this.state.fiTarget !== undefined){
			this.state.fi = this.state.fi + (this.state.fiTarget - this.state.fi) * .08
			this.state.theta = this.state.theta + (this.state.thetaTarget - this.state.theta) * .08
			this.fiControl.data.update(this.state.fi)
			this.thetaControl.data.update(this.state.theta)

			if ((Math.abs(this.state.fiTarget - this.state.fi) < .001) && (Math.abs(this.state.thetaTarget - this.state.theta) < .001)){
				this.state.fiTarget = this.state.thetaTarget = undefined
			}

		}

		this.circleFi.position.set(0, Math.cos(this.state.theta), 0)
		let s = Math.max(Math.sin(this.state.theta), .01)
		this.circleFi.scale.set(s, s, s)

		this.int.rotation.y = this.state.fi
		this.int.rotation.z = this.state.theta

		this.expression.innerHTML = `|ψ〉 = ${Math.round(Math.cos(this.state.theta/2)*1000)/1000} | 0 〉 + ${Math.round(Math.sin(this.state.theta/2)*1000)/1000} <i>e</i><sup><i>i</i> ${Math.round(this.state.fi/Math.PI * 100)/100}π</sup> | 1 〉<br/>P | 1 〉= ${Math.round(Math.sin(this.state.theta/2)**2 * 100) / 100}`

	}

}