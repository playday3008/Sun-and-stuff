let core

window.onload = _=>{

	const td1 = new Button({class: `button`, n: `Overfitting test`})
	const td2 = new Button({class: `button`, n: `Checker`})
	const td3 = new Button({class: `button`, n: `Donut`})
	const td4 = new Button({class: `button`, n: `Spirals`})
	const td5 = new Button({class: `button`, n: `Pareidolia 1`})

	const s = new Range({width: 500, value: .005, class: `input`, min: 0, max: .01, scale: 1, label: `Learning rate`, labelWidth: 200})
	const rr = new Range({width: 500, value: .0, class: `input`, min: 0, max: 1, scale: 1, label: `L2 Regularization rate`, labelWidth: 200})
	const l = new Range({width: 500, value: 2, class: `input`, min: 0, max: 4, scale: 4, step: 1, label: `Network depth`, labelWidth: 200})
	const r = new Button({class: `button`, n: `Reinitialize network`})
	const c = new Button({class: `button`, n: `Clear data`})

	const layerSizeVessel = document.createElement(`div`)
	layerSizeVessel.style.display = `inline-block`
	layerSizeVessel.style.margin = `0 0 12px 0`
	const label = document.createElement(`div`)
	label.innerText = `Neurons per layer (14 max)`
	label.classList.add(`label`)
	const presets = document.createElement(`div`)
	presets.innerText = `Data presets`
	presets.classList.add(`label`)

	let layersCount = 2
	const layerSizes = [8,4,2,6]
	let pareidoliaInt = 1

	document.body.appendChild(document.createElement(`br`))
	document.body.appendChild(presets)
	document.body.appendChild(td1)
	document.body.appendChild(td2)
	document.body.appendChild(td3)
	document.body.appendChild(td4)
	document.body.appendChild(td5)

	document.body.appendChild(s)
	document.body.appendChild(rr)
	document.body.appendChild(l)
	document.body.appendChild(label)
	document.body.appendChild(layerSizeVessel)
	document.body.appendChild(document.createElement(`br`))
	document.body.appendChild(r)
	document.body.appendChild(c)

	r.style.marginLeft = `220px`
	td1.style.marginBottom = `24px`

	core = new Core(document.querySelector(`.canvas`))

	updateLayerSizeControls(layersCount)

	s.data.onchange = v=>{
		core.nn.learningRate = v
	}
	rr.data.onchange = v=>{
		core.nn.regularizationRate = v
	}
	l.data.onchange = v=>{
		layersCount = v
		updateNetwork(layersCount)
	}
	r.data.onchange = v=>{
		core.nn.randomizeWB()
	}
	c.data.onchange = v=>{
		core.trainData = []
		core.points = []
	}

	td1.data.onchange = v=>{
		core.loadTrainData([{"values":[-0.75,-0.7416666666666667,0.55625,0.5625,0.5500694444444445,-0.421875,-0.40796817129629637,-0.41718750000000004,-0.4125520833333334,0.31640625,0.3025763937114198,0.31289062500000003,0.3059761284722223,0.30941406250000003],"target":[-1]},{"values":[-0.6083333333333334,-0.6333333333333333,0.3852777777777778,0.3700694444444445,0.4011111111111111,-0.22512557870370375,-0.254037037037037,-0.23437731481481483,-0.24400925925925926,0.13695139371141982,0.1608901234567901,0.14257953317901237,0.1545391975308642,0.14843896604938273],"target":[-1]},{"values":[-0.35,-0.7666666666666666,0.2683333333333333,0.12249999999999998,0.5877777777777777,-0.04287499999999999,-0.45062962962962955,-0.09391666666666665,-0.2057222222222222,0.015006249999999995,0.34548271604938263,0.03287083333333332,0.15772037037037034,0.07200277777777776],"target":[-1]},{"values":[0.1416666666666666,-0.8416666666666667,-0.11923611111111106,0.020069444444444428,0.7084027777777778,0.0028431712962962924,-0.5962390046296296,-0.016891782407407394,0.10035706018518516,0.0004027826003086413,0.5018344955632716,-0.0023930025077160463,-0.08446719232253083,0.014217250192901223],"target":[-1]},{"values":[0.575,-0.7083333333333333,-0.4072916666666666,0.33062499999999995,0.501736111111111,0.19010937499999997,-0.3553964120370369,-0.23419270833333328,0.28849826388888883,0.10931289062499996,0.25173912519290115,-0.13466080729166663,-0.20435293692129622,0.16588650173611105],"target":[-1]},{"values":[0.6666666666666667,-0.525,-0.35000000000000003,0.44444444444444453,0.275625,0.2962962962962964,-0.14470312500000002,-0.2333333333333334,0.18375000000000002,0.19753086419753096,0.07596914062500001,-0.1555555555555556,-0.09646875000000002,0.12250000000000003],"target":[-1]},{"values":[0.8333333333333333,-0.8666666666666667,-0.7222222222222222,0.6944444444444443,0.7511111111111112,0.5787037037037035,-0.650962962962963,-0.6018518518518517,0.6259259259259259,0.4822530864197529,0.564167901234568,-0.501543209876543,-0.5424691358024691,0.5216049382716049],"target":[-1]},{"values":[0.8083333333333333,-0.8583333333333334,-0.6938194444444445,0.6534027777777778,0.7367361111111113,0.5281672453703704,-0.6323651620370372,-0.5608373842592593,0.5955283564814816,0.42693519000771607,0.5427800974151236,-0.45334355227623463,-0.5111618393132717,0.4813854214891976],"target":[-1]},{"values":[0.04166666666666674,-0.6166666666666667,-0.025694444444444492,0.0017361111111111173,0.3802777777777778,0.00007233796296296335,-0.23450462962962967,-0.0010706018518518558,0.015844907407407436,0.0000030140817901234782,0.14461118827160496,-0.0000446084104938274,-0.009771026234567921,0.0006602044753086444],"target":[-1]},{"values":[-0.17500000000000004,-0.4833333333333333,0.08458333333333334,0.030625000000000017,0.23361111111111105,-0.005359375000000004,-0.112912037037037,-0.01480208333333334,-0.04088194444444444,0.000937890625000001,0.05457415123456788,0.002590364583333335,0.019759606481481482,0.007154340277777779],"target":[-1]},{"values":[-0.45833333333333337,-0.4666666666666667,0.2138888888888889,0.21006944444444448,0.2177777777777778,-0.09628182870370372,-0.10162962962962964,-0.09803240740740743,-0.09981481481481483,0.044129171489197545,0.04742716049382716,0.0449315200617284,0.04658024691358025,0.045748456790123466],"target":[-1]},{"values":[-0.7916666666666666,-0.55,0.4354166666666667,0.626736111111111,0.30250000000000005,-0.4961660879629629,-0.16637500000000005,-0.3447048611111111,-0.2394791666666667,0.39279815297067894,0.09150625000000004,0.27289134837962964,0.1317135416666667,0.18958767361111112],"target":[-1]},{"values":[-0.7916666666666666,-0.8916666666666666,0.7059027777777777,0.626736111111111,0.7950694444444444,-0.4961660879629629,-0.7089369212962962,-0.5588396990740739,-0.6294299768518518,0.39279815297067894,0.6321354214891974,0.44241476176697525,0.5612417293595677,0.49829873167438266],"target":[-1]},{"values":[-0.7583333333333333,-0.3833333333333333,0.2906944444444444,0.5750694444444444,0.14694444444444443,-0.4360943287037037,-0.05632870370370369,-0.220443287037037,-0.11143287037037036,0.3307048659336419,0.021592669753086415,0.16716949266975306,0.0427159336419753,0.08450326003086418],"target":[-1]},{"values":[-0.7916666666666666,-0.42500000000000004,0.33645833333333336,0.626736111111111,0.18062500000000004,-0.4961660879629629,-0.07676562500000003,-0.2663628472222222,-0.14299479166666668,0.39279815297067894,0.032625390625000014,0.21087058738425926,0.06077278645833335,0.11320421006944445],"target":[-1]},{"values":[-0.9,-0.7333333333333334,0.66,0.81,0.5377777777777779,-0.7290000000000001,-0.3943703703703705,-0.5940000000000001,-0.48400000000000015,0.6561000000000001,0.28920493827160504,0.5346000000000001,0.35493333333333343,0.43560000000000015],"target":[-1]},{"values":[-0.1166666666666667,-0.7666666666666666,0.08944444444444447,0.013611111111111117,0.5877777777777777,-0.0015879629629629642,-0.45062962962962955,-0.01043518518518519,-0.06857407407407409,0.00018526234567901254,0.34548271604938263,0.0012174382716049392,0.05257345679012346,0.00800030864197531],"target":[-1]},{"values":[0.016666666666666607,-0.7,-0.011666666666666624,0.0002777777777777758,0.48999999999999994,0.0000046296296296295804,-0.3429999999999999,-0.00019444444444444308,0.008166666666666636,7.71604938271594e-8,0.24009999999999992,-0.0000032407407407407063,-0.005716666666666645,0.00013611111111111012],"target":[-1]},{"values":[0.43333333333333335,-0.475,-0.20583333333333334,0.1877777777777778,0.225625,0.08137037037037037,-0.10717187499999999,-0.08919444444444445,0.09777083333333333,0.0352604938271605,0.05090664062499999,-0.03865092592592592,-0.04644114583333333,0.04236736111111111],"target":[-1]},{"values":[0.7916666666666667,-0.2666666666666667,-0.21111111111111117,0.6267361111111113,0.07111111111111114,0.4961660879629631,-0.018962962962962973,-0.1671296296296297,0.05629629629629632,0.39279815297067916,0.005056790123456794,-0.1323109567901235,-0.015012345679012355,0.04456790123456793],"target":[-1]},{"values":[-0.033333333333333326,-0.16666666666666663,0.005555555555555553,0.0011111111111111107,0.027777777777777766,-0.000037037037037037016,-0.004629629629629627,-0.00018518518518518507,-0.0009259259259259253,0.0000012345679012345669,0.0007716049382716042,0.000006172839506172835,0.00015432098765432085,0.00003086419753086417],"target":[-1]},{"values":[-0.7333333333333334,-0.1166666666666667,0.08555555555555558,0.5377777777777779,0.013611111111111117,-0.3943703703703705,-0.0015879629629629642,-0.06274074074074078,-0.009981481481481487,0.28920493827160504,0.00018526234567901254,0.0460098765432099,0.001164506172839507,0.0073197530864197585],"target":[-1]},{"values":[-0.6833333333333333,0.20833333333333326,-0.14236111111111108,0.46694444444444444,0.04340277777777775,-0.3190787037037037,0.00904224537037036,0.09728009259259256,-0.029658564814814794,0.21803711419753088,0.0018838011188271578,-0.06647472993827158,-0.00617886766975308,0.02026668595679011],"target":[-1]},{"values":[-0.16666666666666663,0.28333333333333344,-0.04722222222222223,0.027777777777777766,0.08027777777777784,-0.004629629629629627,0.022745370370370395,0.00787037037037037,-0.013379629629629637,0.0007716049382716042,0.006444521604938281,-0.001311728395061728,-0.0037908950617283983,0.002229938271604939],"target":[-1]},{"values":[0.5416666666666667,-0.07499999999999996,-0.04062499999999998,0.29340277777777785,0.005624999999999994,0.1589265046296297,-0.00042187499999999924,-0.022005208333333325,0.003046874999999997,0.0860851900077161,0.000031640624999999924,-0.01191948784722222,-0.0002285156249999996,0.0016503906249999986],"target":[-1]},{"values":[-0.29166666666666663,-0.2666666666666667,0.07777777777777778,0.08506944444444442,0.07111111111111114,-0.024811921296296287,-0.018962962962962973,-0.022685185185185183,-0.020740740740740747,0.007236810378086416,0.005056790123456794,0.006616512345679011,0.005530864197530867,0.006049382716049384],"target":[-1]},{"values":[0.8,0.2250000000000001,0.18000000000000008,0.6400000000000001,0.05062500000000004,0.5120000000000001,0.011390625000000014,0.14400000000000007,0.040500000000000036,0.4096000000000001,0.002562890625000004,0.11520000000000007,0.009112500000000011,0.03240000000000003],"target":[-1]},{"values":[-0.7833333333333333,0.6333333333333333,-0.49611111111111106,0.6136111111111111,0.4011111111111111,-0.480662037037037,0.254037037037037,0.38862037037037034,-0.3142037037037037,0.37651859567901236,0.1608901234567901,-0.30441929012345675,-0.19899567901234566,0.24612623456790123],"target":[1]},{"values":[-0.8083333333333333,0.75,-0.60625,0.6534027777777778,0.5625,-0.5281672453703704,0.421875,0.49005208333333333,-0.4546875,0.42693519000771607,0.31640625,-0.3961254340277778,-0.341015625,0.3675390625],"target":[1]},{"values":[-0.2833333333333333,0.8500000000000001,-0.24083333333333334,0.08027777777777777,0.7225000000000001,-0.022745370370370367,0.6141250000000003,0.06823611111111111,-0.20470833333333338,0.006444521604938271,0.5220062500000002,-0.019333564814814814,-0.1740020833333334,0.058000694444444445],"target":[1]},{"values":[0.3999999999999999,0.8083333333333333,0.32333333333333325,0.15999999999999992,0.6534027777777778,0.06399999999999996,0.5281672453703704,0.12933333333333327,0.26136111111111104,0.025599999999999977,0.42693519000771607,0.051733333333333305,0.2112668981481481,0.1045444444444444],"target":[1]},{"values":[0.575,0.825,0.47437499999999994,0.33062499999999995,0.6806249999999999,0.19010937499999997,0.561515625,0.27276562499999996,0.39135937499999995,0.10931289062499996,0.4632503906249999,0.15684023437499997,0.32287148437499996,0.22503164062499995],"target":[1]},{"values":[0.7833333333333334,0.8583333333333334,0.6723611111111113,0.6136111111111112,0.7367361111111113,0.48066203703703725,0.6323651620370372,0.5266828703703705,0.5771099537037039,0.3765185956790126,0.5427800974151236,0.41256824845679035,0.49535271026234584,0.4520694637345681],"target":[1]},{"values":[0.8083333333333333,0.55,0.4445833333333334,0.6534027777777778,0.30250000000000005,0.5281672453703704,0.16637500000000005,0.3593715277777778,0.24452083333333338,0.42693519000771607,0.09150625000000004,0.29049198495370376,0.13448645833333336,0.1976543402777778],"target":[1]},{"values":[0.6583333333333334,0.5333333333333334,0.3511111111111112,0.4334027777777779,0.28444444444444456,0.2853234953703705,0.15170370370370378,0.23114814814814827,0.18725925925925938,0.18783796778549394,0.0809086419753087,0.15217253086419763,0.09987160493827167,0.1232790123456791],"target":[1]},{"values":[0.17500000000000004,0.8,0.14000000000000004,0.030625000000000017,0.6400000000000001,0.005359375000000004,0.5120000000000001,0.024500000000000015,0.11200000000000004,0.000937890625000001,0.4096000000000001,0.004287500000000003,0.08960000000000004,0.019600000000000013],"target":[1]},{"values":[-0.008333333333333304,0.8916666666666666,-0.007430555555555529,0.00006944444444444396,0.7950694444444444,-5.787037037036976e-7,0.7089369212962962,0.00006192129629629585,-0.0066255787037036796,4.822530864197462e-9,0.6321354214891974,-5.160108024691303e-7,-0.005907807677469114,0.00005521315586419714],"target":[1]},{"values":[-0.6583333333333333,0.8833333333333333,-0.5815277777777778,0.43340277777777775,0.7802777777777777,-0.2853234953703704,0.6892453703703703,0.3828391203703703,-0.5136828703703703,0.18783796778549383,0.6088334104938271,-0.2520357542438272,-0.45375320216049375,0.3381745563271605],"target":[1]},{"values":[-0.825,0.5249999999999999,-0.4331249999999999,0.6806249999999999,0.2756249999999999,-0.561515625,0.14470312499999993,0.3573281249999999,-0.2273906249999999,0.4632503906249999,0.07596914062499995,-0.2947957031249999,-0.11938007812499994,0.1875972656249999],"target":[1]},{"values":[-0.8916666666666666,0.3833333333333333,-0.34180555555555553,0.7950694444444444,0.14694444444444443,-0.7089369212962962,0.05632870370370369,0.30477662037037034,-0.13102546296296294,0.6321354214891974,0.021592669753086415,-0.2717591531635802,-0.05022642746913579,0.11683103780864196],"target":[1]},{"values":[-0.3916666666666667,0.6000000000000001,-0.23500000000000007,0.1534027777777778,0.3600000000000001,-0.060082754629629656,0.21600000000000008,0.0920416666666667,-0.14100000000000007,0.023532412229938286,0.12960000000000008,-0.0360496527777778,-0.08460000000000004,0.055225000000000024],"target":[1]},{"values":[0,0.5916666666666666,0,0,0.3500694444444443,0,0.20712442129629619,0,0,0,0.12254861593364189,0,0,0],"target":[1]},{"values":[0.25,0.5583333333333333,0.13958333333333334,0.0625,0.3117361111111111,0.015625,0.17405266203703706,0.034895833333333334,0.07793402777777778,0.00390625,0.09717940297067902,0.008723958333333334,0.043513165509259266,0.019483506944444444],"target":[1]},{"values":[0.4916666666666667,0.4916666666666667,0.24173611111111115,0.24173611111111115,0.24173611111111115,0.11885358796296298,0.11885358796296298,0.11885358796296298,0.11885358796296298,0.05843634741512347,0.05843634741512347,0.05843634741512347,0.05843634741512347,0.05843634741512348],"target":[1]},{"values":[0.30833333333333335,0.16666666666666674,0.051388888888888914,0.09506944444444446,0.027777777777777804,0.02931307870370371,0.0046296296296296354,0.015844907407407415,0.008564814814814824,0.00903819926697531,0.0007716049382716063,0.0048855131172839536,0.001427469135802471,0.0026408179012345706],"target":[1]},{"values":[0.016666666666666607,0.42500000000000004,0.007083333333333309,0.0002777777777777758,0.18062500000000004,0.0000046296296296295804,0.07676562500000003,0.00011805555555555473,0.0030104166666666565,7.71604938271594e-8,0.032625390625000014,0.000001967592592592572,0.0012794270833333293,0.00005017361111111077],"target":[1]},{"values":[-0.5166666666666666,0.34166666666666656,-0.1765277777777777,0.2669444444444444,0.11673611111111104,-0.13792129629629624,0.039884837962962924,0.09120601851851846,-0.060313657407407364,0.07125933641975306,0.013627319637345663,-0.0471231095679012,-0.020607166280864175,0.031162056327160466],"target":[1]},{"values":[-0.35,-0.01666666666666672,0.005833333333333351,0.12249999999999998,0.0002777777777777795,-0.04287499999999999,-0.000004629629629629673,-0.002041666666666673,-0.00009722222222222283,0.015006249999999995,7.716049382716145e-8,0.0007145833333333354,0.0000016203703703703853,0.000034027777777777985],"target":[1]},{"values":[0.31666666666666665,-0.033333333333333326,-0.010555555555555552,0.10027777777777777,0.0011111111111111107,0.031754629629629626,-0.000037037037037037016,-0.0033425925925925914,0.0003518518518518517,0.010055632716049381,0.0000012345679012345669,-0.0010584876543209872,-0.000011728395061728387,0.00011141975308641971],"target":[1]},{"values":[0.8,0.3999999999999999,0.31999999999999995,0.6400000000000001,0.15999999999999992,0.5120000000000001,0.06399999999999996,0.256,0.12799999999999995,0.4096000000000001,0.025599999999999977,0.2048,0.05119999999999997,0.10239999999999996],"target":[1]},{"values":[0.40833333333333344,0.31666666666666665,0.1293055555555556,0.1667361111111112,0.10027777777777777,0.06808391203703709,0.031754629629629626,0.052799768518518544,0.040946759259259266,0.02780093074845682,0.010055632716049381,0.021559905478395078,0.0129664737654321,0.016719926697530873],"target":[1]},{"values":[0.8583333333333334,-0.07499999999999996,-0.06437499999999996,0.7367361111111113,0.005624999999999994,0.6323651620370372,-0.00042187499999999924,-0.05525520833333331,0.004828124999999995,0.5427800974151236,0.000031640624999999924,-0.047427387152777764,-0.00036210937499999937,0.004144140624999996],"target":[1]},{"values":[0.2583333333333333,-0.29166666666666663,-0.0753472222222222,0.0667361111111111,0.08506944444444442,0.01724016203703703,-0.024811921296296287,-0.019464699074074065,0.02197627314814814,0.004453708526234566,0.007236810378086416,-0.005028380594135799,-0.00640974633487654,0.005677203896604935],"target":[1]},{"values":[-0.8583333333333334,0.05833333333333335,-0.05006944444444446,0.7367361111111113,0.0034027777777777793,-0.6323651620370372,0.00019849537037037052,0.04297627314814817,-0.002920717592592594,0.5427800974151236,0.000011578896604938284,-0.036887967785493844,-0.0001703751929012347,0.0025069492669753104],"target":[1]}])
	}
	td2.data.onchange = v=>{
		core.loadTrainData([{"values":[-0.6416666666666666,-0.625,0.40104166666666663,0.411736111111111,0.390625,-0.2641973379629629,-0.244140625,-0.2573350694444444,-0.25065104166666663,0.16952662519290118,0.152587890625,0.16512333622685182,0.15665690104166666,0.16083441840277773],"target":[-1]},{"values":[-0.2416666666666667,-0.625,0.15104166666666669,0.05840277777777779,0.390625,-0.014114004629629634,-0.244140625,-0.03650173611111112,-0.09440104166666669,0.0034108844521604956,0.152587890625,0.008821252893518521,0.05900065104166667,0.022813585069444448],"target":[1]},{"values":[0.15833333333333344,-0.625,-0.0989583333333334,0.025069444444444478,0.390625,0.003969328703703712,-0.244140625,-0.0156684027777778,0.06184895833333337,0.0006284770447530881,0.152587890625,-0.00248083043981482,-0.038655598958333356,0.009792751736111124],"target":[-1]},{"values":[0.5166666666666666,-0.625,-0.32291666666666663,0.2669444444444444,0.390625,0.13792129629629624,-0.244140625,-0.16684027777777774,0.20182291666666663,0.07125933641975306,0.152587890625,-0.08620081018518515,-0.12613932291666666,0.10427517361111108],"target":[1]},{"values":[0.8333333333333333,-0.6333333333333333,-0.5277777777777777,0.6944444444444443,0.4011111111111111,0.5787037037037035,-0.254037037037037,-0.4398148148148147,0.3342592592592592,0.4822530864197529,0.1608901234567901,-0.3665123456790122,-0.2116975308641975,0.2785493827160493],"target":[-1]},{"values":[0.8500000000000001,-0.19999999999999996,-0.16999999999999998,0.7225000000000001,0.03999999999999998,0.6141250000000003,-0.007999999999999995,-0.1445,0.03399999999999999,0.5220062500000002,0.0015999999999999986,-0.12282500000000002,-0.006799999999999996,0.02889999999999999],"target":[1]},{"values":[0.575,-0.23333333333333328,-0.13416666666666663,0.33062499999999995,0.05444444444444442,0.19010937499999997,-0.012703703703703696,-0.0771458333333333,0.03130555555555554,0.10931289062499996,0.002964197530864195,-0.04435885416666665,-0.0073046296296296245,0.018000694444444434],"target":[-1]},{"values":[0.1416666666666666,-0.25,-0.03541666666666665,0.020069444444444428,0.0625,0.0028431712962962924,-0.015625,-0.005017361111111107,0.008854166666666663,0.0004027826003086413,0.00390625,-0.0007107928240740731,-0.0022135416666666657,0.0012543402777777767],"target":[1]},{"values":[-0.17500000000000004,-0.22499999999999998,0.03937500000000001,0.030625000000000017,0.05062499999999999,-0.005359375000000004,-0.011390624999999998,-0.0068906250000000035,-0.008859375000000001,0.000937890625000001,0.0025628906249999988,0.0012058593750000008,0.0019933593750000003,0.0015503906250000006],"target":[-1]},{"values":[-0.6833333333333333,-0.23333333333333328,0.15944444444444442,0.46694444444444444,0.05444444444444442,-0.3190787037037037,-0.012703703703703696,-0.10895370370370368,-0.03720370370370369,0.21803711419753088,0.002964197530864195,0.07445169753086418,0.00868086419753086,0.025422530864197518],"target":[1]},{"values":[-0.6666666666666667,0.28333333333333344,-0.18888888888888897,0.44444444444444453,0.08027777777777784,-0.2962962962962964,0.022745370370370395,0.125925925925926,-0.05351851851851856,0.19753086419753096,0.006444521604938281,-0.08395061728395067,-0.015163580246913598,0.035679012345679044],"target":[-1]},{"values":[-0.2416666666666667,0.20833333333333326,-0.05034722222222221,0.05840277777777779,0.04340277777777775,-0.014114004629629634,0.00904224537037036,0.012167245370370368,-0.010489004629629624,0.0034108844521604956,0.0018838011188271578,-0.0029404176311728395,-0.002185209297839504,0.002534842785493826],"target":[1]},{"values":[0.21666666666666656,0.19166666666666665,0.041527777777777754,0.0469444444444444,0.03673611111111111,0.010171296296296282,0.007041087962962962,0.008997685185185176,0.007959490740740736,0.0022037808641975267,0.001349541859567901,0.0019494984567901207,0.0015255690586419744,0.001724556327160492],"target":[-1]},{"values":[0.6000000000000001,0.17500000000000004,0.10500000000000004,0.3600000000000001,0.030625000000000017,0.21600000000000008,0.005359375000000004,0.06300000000000003,0.018375000000000013,0.12960000000000008,0.000937890625000001,0.03780000000000002,0.0032156250000000028,0.011025000000000009],"target":[1]},{"values":[0.8666666666666667,0.31666666666666665,0.27444444444444444,0.7511111111111112,0.10027777777777777,0.650962962962963,0.031754629629629626,0.23785185185185187,0.0869074074074074,0.564167901234568,0.010055632716049381,0.20613827160493825,0.027520679012345676,0.07531975308641975],"target":[-1]},{"values":[0.8166666666666667,0.7916666666666667,0.6465277777777778,0.6669444444444445,0.6267361111111113,0.5446712962962963,0.4961660879629631,0.5279976851851852,0.5118344907407408,0.4448148919753086,0.39279815297067916,0.4311981095679013,0.4052023051697532,0.41799816743827173],"target":[1]},{"values":[0.3916666666666666,0.7,0.2741666666666666,0.15340277777777772,0.48999999999999994,0.0600827546296296,0.3429999999999999,0.1073819444444444,0.19191666666666662,0.02353241222993826,0.24009999999999992,0.04205792824074072,0.1343416666666666,0.07516736111111107],"target":[-1]},{"values":[0.06666666666666665,0.6833333333333333,0.045555555555555544,0.004444444444444443,0.46694444444444444,0.00029629629629629613,0.3190787037037037,0.003037037037037036,0.03112962962962962,0.00001975308641975307,0.21803711419753088,0.00020246913580246903,0.02127191358024691,0.0020753086419753076],"target":[1]},{"values":[-0.3916666666666667,0.6499999999999999,-0.25458333333333333,0.1534027777777778,0.4224999999999999,-0.060082754629629656,0.2746249999999999,0.09971180555555556,-0.16547916666666665,0.023532412229938286,0.17850624999999992,-0.03905379050925927,-0.1075614583333333,0.06481267361111111],"target":[-1]},{"values":[-0.7666666666666666,0.6833333333333333,-0.5238888888888888,0.5877777777777777,0.46694444444444444,-0.45062962962962955,0.3190787037037037,0.40164814814814814,-0.3579907407407407,0.34548271604938263,0.21803711419753088,-0.3079302469135802,-0.2446270061728395,0.27445956790123455],"target":[1]}])
	}
	td3.data.onchange = v=>{
		core.loadTrainData([{"values":[0.02499999999999991,0.02499999999999991,0.0006249999999999956,0.0006249999999999956,0.0006249999999999956,0.000015624999999999834,0.000015624999999999834,0.000015624999999999834,0.000015624999999999834,3.9062499999999446e-7,3.9062499999999446e-7,3.9062499999999446e-7,3.9062499999999446e-7,3.9062499999999446e-7],"target":[-1]},{"values":[-0.10833333333333328,-0.15000000000000002,0.016249999999999994,0.0117361111111111,0.022500000000000006,-0.0012714120370370353,-0.0033750000000000013,-0.0017604166666666653,-0.0024374999999999996,0.00013773630401234542,0.0005062500000000003,0.00019071180555555532,0.00036562499999999996,0.0002640624999999998],"target":[1]},{"values":[-0.19166666666666665,0.1333333333333333,-0.025555555555555547,0.03673611111111111,0.01777777777777777,-0.007041087962962962,0.002370370370370369,0.004898148148148146,-0.003407407407407406,0.001349541859567901,0.0003160493827160491,-0.0009388117283950614,-0.0004543209876543207,0.0006530864197530861],"target":[1]},{"values":[0.1333333333333333,0.2666666666666666,0.03555555555555554,0.01777777777777777,0.07111111111111108,0.002370370370370369,0.018962962962962952,0.004740740740740738,0.009481481481481476,0.0003160493827160491,0.005056790123456786,0.0006320987654320982,0.002528395061728393,0.0012641975308641965],"target":[1]},{"values":[0.2666666666666666,0.1333333333333333,0.03555555555555554,0.07111111111111108,0.01777777777777777,0.018962962962962952,0.002370370370370369,0.009481481481481476,0.004740740740740738,0.005056790123456786,0.0003160493827160491,0.002528395061728393,0.0006320987654320982,0.0012641975308641965],"target":[1]},{"values":[0.1499999999999999,-0.16666666666666663,-0.02499999999999998,0.022499999999999975,0.027777777777777766,0.003374999999999994,-0.004629629629629627,-0.003749999999999995,0.004166666666666662,0.0005062499999999988,0.0007716049382716042,-0.0005624999999999989,-0.0006944444444444436,0.000624999999999999],"target":[1]},{"values":[-0.31666666666666665,-0.20833333333333337,0.06597222222222224,0.10027777777777777,0.04340277777777779,-0.031754629629629626,-0.009042245370370376,-0.020891203703703707,-0.013744212962962967,0.010055632716049381,0.001883801118827162,0.006615547839506173,0.0028633777006172854,0.004352334104938273],"target":[-1]},{"values":[-0.3583333333333333,0.25,-0.08958333333333332,0.12840277777777773,0.0625,-0.04601099537037035,0.015625,0.03210069444444443,-0.02239583333333333,0.016487273341049373,0.00390625,-0.011502748842592588,-0.0055989583333333325,0.008025173611111108],"target":[-1]},{"values":[-0.06666666666666665,0.4750000000000001,-0.03166666666666666,0.004444444444444443,0.22562500000000008,-0.00029629629629629613,0.10717187500000006,0.0021111111111111105,-0.015041666666666668,0.00001975308641975307,0.05090664062500004,-0.00014074074074074068,-0.007144791666666669,0.0010027777777777778],"target":[-1]},{"values":[0.125,0.44166666666666665,0.05520833333333333,0.015625,0.19506944444444443,0.001953125,0.08615567129629628,0.0069010416666666664,0.024383680555555554,0.000244140625,0.038052088155864194,0.0008626302083333333,0.010769458912037035,0.0030479600694444443],"target":[-1]},{"values":[0.3999999999999999,0.2666666666666666,0.10666666666666662,0.15999999999999992,0.07111111111111108,0.06399999999999996,0.018962962962962952,0.04266666666666664,0.02844444444444443,0.025599999999999977,0.005056790123456786,0.017066666666666654,0.007585185185185179,0.011377777777777768],"target":[-1]},{"values":[0.4833333333333334,0.016666666666666607,0.008055555555555528,0.23361111111111116,0.0002777777777777758,0.11291203703703707,0.0000046296296296295804,0.0038935185185185054,0.00013425925925925834,0.05457415123456793,7.71604938271594e-8,0.0018818672839506112,0.0000022376543209876308,0.00006489197530864153],"target":[-1]},{"values":[0.375,-0.30833333333333335,-0.115625,0.140625,0.09506944444444446,0.052734375,-0.02931307870370371,-0.043359375000000006,0.035651041666666675,0.019775390625,0.00903819926697531,-0.016259765625000002,-0.01099240451388889,0.013369140625000001],"target":[-1]},{"values":[0.05833333333333335,-0.42500000000000004,-0.024791666666666677,0.0034027777777777793,0.18062500000000004,0.00019849537037037052,-0.07676562500000003,-0.0014461805555555565,0.010536458333333339,0.000011578896604938284,0.032625390625000014,-0.00008436053240740748,-0.00447799479166667,0.0006146267361111115],"target":[-1]},{"values":[-0.475,-0.3833333333333333,0.18208333333333332,0.225625,0.14694444444444443,-0.10717187499999999,-0.05632870370370369,-0.08648958333333333,-0.0697986111111111,0.05090664062499999,0.021592669753086415,0.04108255208333333,0.026756134259259254,0.03315434027777778],"target":[1]},{"values":[-0.5916666666666667,-0.09999999999999998,0.05916666666666665,0.35006944444444443,0.009999999999999995,-0.2071244212962963,-0.0009999999999999994,-0.03500694444444444,-0.005916666666666664,0.12254861593364198,0.00009999999999999991,0.020712442129629624,0.0005916666666666663,0.0035006944444444426],"target":[1]},{"values":[-0.6833333333333333,0.6166666666666667,-0.4213888888888889,0.46694444444444444,0.3802777777777778,-0.3190787037037037,0.23450462962962967,0.2879490740740741,-0.2598564814814815,0.21803711419753088,0.14461118827160496,-0.19676520061728398,-0.1602448302469136,0.17756859567901237],"target":[1]},{"values":[-0.3666666666666667,0.7749999999999999,-0.2841666666666667,0.13444444444444448,0.6006249999999999,-0.04929629629629631,0.46548437499999984,0.10419444444444446,-0.22022916666666664,0.018075308641975315,0.3607503906249998,-0.03820462962962964,-0.1706776041666666,0.08075069444444445],"target":[1]},{"values":[0.3999999999999999,0.7416666666666667,0.29666666666666663,0.15999999999999992,0.5500694444444445,0.06399999999999996,0.40796817129629637,0.11866666666666661,0.22002777777777774,0.025599999999999977,0.3025763937114198,0.047466666666666636,0.1631872685185185,0.08801111111111108],"target":[1]},{"values":[0.6333333333333333,0.5583333333333333,0.3536111111111111,0.4011111111111111,0.3117361111111111,0.254037037037037,0.17405266203703706,0.22395370370370368,0.19743287037037036,0.1608901234567901,0.09717940297067902,0.14183734567901232,0.1102333526234568,0.12504081790123456],"target":[1]},{"values":[0.7583333333333333,0.25,0.18958333333333333,0.5750694444444444,0.0625,0.4360943287037037,0.015625,0.1437673611111111,0.04739583333333333,0.3307048659336419,0.00390625,0.10902358217592592,0.011848958333333333,0.035941840277777776],"target":[1]},{"values":[0.8083333333333333,-0.33333333333333337,-0.2694444444444445,0.6534027777777778,0.11111111111111113,0.5281672453703704,-0.03703703703703705,-0.21780092592592595,0.08981481481481483,0.42693519000771607,0.012345679012345685,-0.17605574845679015,-0.029938271604938282,0.07260030864197532],"target":[1]},{"values":[0.6833333333333333,-0.6083333333333334,-0.4156944444444445,0.46694444444444444,0.3700694444444445,0.3190787037037037,-0.22512557870370375,-0.2840578703703704,0.2528807870370371,0.21803711419753088,0.13695139371141982,-0.19410621141975312,-0.15383581211419756,0.17280187114197534],"target":[1]},{"values":[0.08333333333333326,-0.7333333333333334,-0.06111111111111106,0.006944444444444432,0.5377777777777779,0.0005787037037037022,-0.3943703703703705,-0.0050925925925925835,0.044814814814814787,0.000048225308641975137,0.28920493827160504,-0.00042438271604938163,-0.03286419753086418,0.003734567901234562],"target":[1]},{"values":[-0.3583333333333333,-0.5416666666666667,0.19409722222222223,0.12840277777777773,0.29340277777777785,-0.04601099537037035,-0.1589265046296297,-0.06955150462962961,-0.10513599537037038,0.016487273341049373,0.0860851900077161,0.024922622492283945,0.05694866415895063,0.03767373167438271],"target":[1]},{"values":[-0.725,0.20833333333333326,-0.1510416666666666,0.525625,0.04340277777777775,-0.38107812499999993,0.00904224537037036,0.1095052083333333,-0.03146701388888887,0.27628164062499994,0.0018838011188271578,-0.07939127604166663,-0.0065556278935185106,0.02281358506944443],"target":[1]},{"values":[-0.04166666666666663,0.2416666666666667,-0.010069444444444436,0.001736111111111108,0.05840277777777779,-0.00007233796296296277,0.014114004629629634,0.0004195601851851845,-0.0024334490740740723,0.000003014081790123446,0.0034108844521604956,-0.000017481674382716006,-0.0005880835262345676,0.00010139371141975292],"target":[1]},{"values":[0.04166666666666674,0.10000000000000009,0.004166666666666678,0.0017361111111111173,0.010000000000000018,0.00007233796296296335,0.0010000000000000026,0.00017361111111111188,0.00041666666666666816,0.0000030140817901234782,0.00010000000000000036,0.0000072337962962963415,0.00004166666666666685,0.000017361111111111203],"target":[-1]},{"values":[-0.3916666666666667,0.03333333333333344,-0.013055555555555598,0.1534027777777778,0.001111111111111118,-0.060082754629629656,0.00003703703703703738,0.005113425925925943,-0.000435185185185188,0.023532412229938286,0.0000012345679012345832,-0.0020027584876543283,-0.00001450617283950631,0.00017044753086419863],"target":[-1]}])
	}
	td4.data.onchange = v=>{
		core.loadTrainData([{"values":[-0.41666666666666663,-0.675,0.28125,0.17361111111111108,0.45562500000000006,-0.07233796296296294,-0.30754687500000005,-0.11718749999999999,-0.18984375,0.030140817901234556,0.20759414062500006,0.048828124999999986,0.12814453125,0.0791015625],"target":[-1]},{"values":[-0.22499999999999998,-0.675,0.15187499999999998,0.05062499999999999,0.45562500000000006,-0.011390624999999998,-0.30754687500000005,-0.034171875,-0.102515625,0.0025628906249999988,0.20759414062500006,0.007688671874999999,0.069198046875,0.023066015625],"target":[-1]},{"values":[0.2333333333333334,-0.6583333333333333,-0.15361111111111114,0.05444444444444447,0.43340277777777775,0.012703703703703714,-0.2853234953703704,-0.035842592592592606,0.10112731481481484,0.0029641975308642007,0.18783796778549383,-0.008363271604938279,-0.06657548225308645,0.023596373456790134],"target":[-1]},{"values":[0.3583333333333334,-0.5916666666666667,-0.21201388888888892,0.1284027777777778,0.35006944444444443,0.04601099537037039,-0.2071244212962963,-0.07597164351851854,0.12544155092592593,0.016487273341049394,0.12254861593364198,-0.027223172260802484,-0.07421958429783952,0.04494988908179013],"target":[-1]},{"values":[0.5083333333333333,-0.43333333333333335,-0.22027777777777777,0.25840277777777776,0.1877777777777778,0.13135474537037034,-0.08137037037037037,-0.11197453703703704,0.09545370370370371,0.0667719955632716,0.0352604938271605,-0.056920389660493814,-0.041363271604938266,0.04852229938271605],"target":[-1]},{"values":[0.6083333333333334,-0.01666666666666672,-0.010138888888888921,0.3700694444444445,0.0002777777777777795,0.22512557870370375,-0.000004629629629629673,-0.006167824074074095,0.00016898148148148255,0.13695139371141982,7.716049382716145e-8,-0.0037520929783950744,-0.0000028163580246913847,0.00010279706790123522],"target":[-1]},{"values":[0.5416666666666667,0.32499999999999996,0.17604166666666668,0.29340277777777785,0.10562499999999997,0.1589265046296297,0.03432812499999999,0.09535590277777779,0.05721354166666666,0.0860851900077161,0.011156640624999995,0.05165111400462965,0.018594401041666663,0.030990668402777775],"target":[-1]},{"values":[0.2666666666666666,0.575,0.1533333333333333,0.07111111111111108,0.33062499999999995,0.018962962962962952,0.19010937499999997,0.04088888888888887,0.08816666666666663,0.005056790123456786,0.10931289062499996,0.010903703703703697,0.050695833333333315,0.023511111111111097],"target":[-1]},{"values":[-0.09999999999999998,0.6083333333333334,-0.06083333333333332,0.009999999999999995,0.3700694444444445,-0.0009999999999999994,0.22512557870370375,0.006083333333333331,-0.03700694444444444,0.00009999999999999991,0.13695139371141982,-0.000608333333333333,-0.022512557870370372,0.003700694444444443],"target":[-1]},{"values":[-0.33333333333333337,0.5,-0.16666666666666669,0.11111111111111113,0.25,-0.03703703703703705,0.125,0.055555555555555566,-0.08333333333333334,0.012345679012345685,0.0625,-0.018518518518518524,-0.04166666666666667,0.027777777777777783],"target":[-1]},{"values":[-0.43333333333333335,0.18333333333333335,-0.07944444444444446,0.1877777777777778,0.03361111111111112,-0.08137037037037037,0.006162037037037039,0.03442592592592593,-0.014564814814814819,0.0352604938271605,0.0011297067901234572,-0.014917901234567902,-0.002670216049382717,0.006311419753086422],"target":[-1]},{"values":[-0.32499999999999996,-0.09166666666666667,0.029791666666666664,0.10562499999999997,0.00840277777777778,-0.03432812499999999,-0.0007702546296296298,-0.009682291666666665,-0.0027309027777777783,0.011156640624999995,0.00007060667438271607,0.0031467447916666657,0.00025033275462962965,0.0008875434027777778],"target":[-1]},{"values":[-0.1166666666666667,-0.1333333333333333,0.015555555555555557,0.013611111111111117,0.01777777777777777,-0.0015879629629629642,-0.002370370370370369,-0.0018148148148148153,-0.0020740740740740737,0.00018526234567901254,0.0003160493827160491,0.0002117283950617285,0.00027654320987654314,0.00024197530864197533],"target":[-1]},{"values":[0.05833333333333335,-0.07499999999999996,-0.004374999999999999,0.0034027777777777793,0.005624999999999994,0.00019849537037037052,-0.00042187499999999924,-0.0002552083333333333,0.0003281249999999997,0.000011578896604938284,0.000031640624999999924,-0.000014887152777777781,-0.000024609374999999963,0.000019140624999999986],"target":[-1]},{"values":[0.1166666666666667,0.08333333333333326,0.009722222222222215,0.013611111111111117,0.006944444444444432,0.0015879629629629642,0.0005787037037037022,0.0011342592592592587,0.000810185185185184,0.00018526234567901254,0.000048225308641975137,0.00013233024691358024,0.00006751543209876526,0.00009452160493827147],"target":[-1]},{"values":[-0.08333333333333337,0.09166666666666656,-0.0076388888888888834,0.006944444444444451,0.008402777777777759,-0.0005787037037037044,0.000770254629629627,0.0006365740740740739,-0.0007002314814814803,0.000048225308641975394,0.00007060667438271574,-0.000053047839506172846,-0.00006418788580246895,0.000058352623456790046],"target":[1]},{"values":[-0.1166666666666667,0.2583333333333333,-0.030138888888888892,0.013611111111111117,0.0667361111111111,-0.0015879629629629642,0.01724016203703703,0.003516203703703705,-0.00778587962962963,0.00018526234567901254,0.004453708526234566,-0.00041022376543209903,-0.002011352237654321,0.0009083526234567903],"target":[1]},{"values":[-0.008333333333333304,0.30833333333333335,-0.0025694444444444354,0.00006944444444444396,0.09506944444444446,-5.787037037036976e-7,0.02931307870370371,0.000021412037037036887,-0.0007922453703703676,4.822530864197462e-9,0.00903819926697531,-1.7843364197530676e-7,-0.00024427565586419673,0.000006602044753086374],"target":[1]},{"values":[0.125,0.29166666666666674,0.03645833333333334,0.015625,0.08506944444444449,0.001953125,0.024811921296296315,0.004557291666666668,0.010633680555555561,0.000244140625,0.007236810378086427,0.0005696614583333335,0.0031014901620370393,0.0013292100694444451],"target":[1]},{"values":[0.2749999999999999,0.20833333333333326,0.05729166666666663,0.07562499999999996,0.04340277777777775,0.02079687499999998,0.00904224537037036,0.01575520833333332,0.011935763888888878,0.005719140624999993,0.0018838011188271578,0.0043326822916666605,0.0024866174768518484,0.00328233506944444],"target":[1]},{"values":[0.3583333333333334,0,0,0.1284027777777778,0,0.04601099537037039,0,0,0,0.016487273341049394,0,0,0,0],"target":[1]},{"values":[0.2749999999999999,-0.25,-0.06874999999999998,0.07562499999999996,0.0625,0.02079687499999998,-0.015625,-0.01890624999999999,0.017187499999999994,0.005719140624999993,0.00390625,-0.005199218749999995,-0.004296874999999999,0.004726562499999997],"target":[1]},{"values":[0.16666666666666674,-0.41666666666666663,-0.06944444444444448,0.027777777777777804,0.17361111111111108,0.0046296296296296354,-0.07233796296296294,-0.011574074074074084,0.028935185185185192,0.0007716049382716063,0.030140817901234556,-0.0019290123456790146,-0.012056327160493829,0.004822530864197534],"target":[1]},{"values":[-0.09999999999999998,-0.4833333333333333,0.04833333333333332,0.009999999999999995,0.23361111111111105,-0.0009999999999999994,-0.112912037037037,-0.00483333333333333,-0.0233611111111111,0.00009999999999999991,0.05457415123456788,0.00048333333333333296,0.011291203703703697,0.002336111111111109],"target":[1]},{"values":[-0.33333333333333337,-0.44999999999999996,0.15,0.11111111111111113,0.20249999999999996,-0.03703703703703705,-0.09112499999999998,-0.05,-0.06749999999999999,0.012345679012345685,0.04100624999999998,0.01666666666666667,0.030375,0.0225],"target":[1]},{"values":[-0.5833333333333333,-0.3666666666666667,0.21388888888888888,0.3402777777777777,0.13444444444444448,-0.1984953703703703,-0.04929629629629631,-0.12476851851851849,-0.07842592592592594,0.11578896604938266,0.018075308641975315,0.07278163580246912,0.028756172839506176,0.04574845679012345],"target":[1]},{"values":[-0.8166666666666667,-0.08333333333333337,0.06805555555555559,0.6669444444444445,0.006944444444444451,-0.5446712962962963,-0.0005787037037037044,-0.05557870370370373,-0.005671296296296302,0.4448148919753086,0.000048225308641975394,0.04538927469135805,0.0004726080246913586,0.004631558641975313],"target":[1]},{"values":[-0.8416666666666667,0.3583333333333334,-0.3015972222222223,0.7084027777777778,0.1284027777777778,-0.5962390046296296,0.04601099537037039,0.25384432870370377,-0.10807233796296299,0.5018344955632716,0.016487273341049394,-0.213652309992284,-0.03872592110339508,0.09096088445216052],"target":[1]},{"values":[-0.7416666666666667,0.6916666666666667,-0.5129861111111111,0.5500694444444445,0.47840277777777773,-0.40796817129629637,0.3308952546296296,0.3804646990740741,-0.3548153935185185,0.3025763937114198,0.2288692177854938,-0.28217798514660497,-0.2454139805169753,0.26315475019290124],"target":[1]},{"values":[-0.5833333333333333,0.8916666666666666,-0.5201388888888888,0.3402777777777777,0.7950694444444444,-0.1984953703703703,0.7089369212962962,0.3034143518518517,-0.4637905092592592,0.11578896604938266,0.6321354214891974,-0.1769917052469135,-0.41354653742283937,0.2705444637345678],"target":[1]},{"values":[-0.32499999999999996,0.9750000000000001,-0.31687499999999996,0.10562499999999997,0.9506250000000002,-0.03432812499999999,0.9268593750000003,0.10298437499999998,-0.308953125,0.011156640624999995,0.9036878906250003,-0.03346992187499999,-0.30122929687500005,0.100409765625],"target":[1]},{"values":[-0.5833333333333333,-0.725,0.4229166666666666,0.3402777777777777,0.525625,-0.1984953703703703,-0.38107812499999993,-0.24670138888888882,-0.3066145833333333,0.11578896604938266,0.27628164062499994,0.14390914351851847,0.2222955729166666,0.17885850694444438],"target":[-1]},{"values":[-0.7916666666666666,-0.7833333333333333,0.6201388888888889,0.626736111111111,0.6136111111111111,-0.4961660879629629,-0.480662037037037,-0.490943287037037,-0.4857754629629629,0.39279815297067894,0.37651859567901236,0.3886634355709876,0.38052411265432096,0.38457224151234565],"target":[-1]}])
	}
	td5.data.onchange = v=>{

		pareidoliaInt++
		td5.innerText = `Pareidolia ` + pareidoliaInt
		core.points = []
		core.trainData = []

		for (let i = 0; i < 32; i++){

			const point = {
				class: Math.random() > .5 ? 0 : 1, 
				position: {
					x: Math.random() * 2 - 1, 
					y: Math.random() * 2 - 1
				}
			}
			core.points.push(point)
			
			const data = {}
			data.values = new Matrix(1,14).setFromArray(core.getPolynomialArray(point.position.x, point.position.y))
			data.targets = new Matrix(1,1).setFromArray([point.class === 0 ? -1 : 1])

			core.trainData.push(data)

		}

		
	}

	function updateNetwork(v){
		const layers = [14]
		for (let i = 0; i < v; i++){
			layers.push(layerSizes[i] || 4)
		}
		layers.push(1)

		core.nn = new Skynet({
			layers: layers
		})
		core.initGraphics()

		updateLayerSizeControls(v)
	}

	function updateLayerSizeControls(v){

		// layerSizeVessel.innerHTML = ``
		for (let i = 0; i < v; i++){

			if (!layerSizeVessel.children[i]){
				const num = document.createElement(`input`)
				num.classList.add(`layersNum`)
				num.setAttribute(`type`, `number`)
				num.setAttribute(`min`, 1)
				num.setAttribute(`max`, 14)
				num.value = layerSizes[i]
				num.id = i
				layerSizeVessel.appendChild(num)

				num.addEventListener(`input`, _=>{
					
					if (num.value < 1 || num.value > 14){
						// num.value = layerSizes[i]
					} else {
						layerSizes[i] = +num.value
						updateNetwork(layersCount)
					}

				})
				num.addEventListener(`blur`, _=>{
					if (num.value < 1 || num.value > 14){
						num.value = layerSizes[i]
					}
				})
			} 
		}

		for (let i = v; i < layerSizeVessel.children.length; i++){
			layerSizeVessel.removeChild(layerSizeVessel.children[layerSizeVessel.children.length - 1])
		}

	}

}

class Core{

	constructor(canvas) {

		this.canvas = canvas
		this.ratio = devicePixelRatio
		this.canvas.width = this.w = this.canvas.offsetWidth * this.ratio
		this.canvas.height = this.h = this.canvas.offsetHeight * this.ratio
		this.ctx = this.canvas.getContext(`2d`)
		this.ctx.font = 11 * this.ratio + `px Condensed`
		this.ctx.lineWidth = this.ratio
		this.ctx.textBaseline = `middle`
		this.ctx.textAlign = `center`

		this.vcanvas = document.createElement(`canvas`)
		this.vcanvas.scale = .1
		this.vcanvas.width = this.vcanvas.height = this.h * .4 * this.vcanvas.scale
		this.vcanvas.position = {x: this.w  - this.vcanvas.width / this.vcanvas.scale, y: this.h - this.vcanvas.height / this.vcanvas.scale}
		this.vctx = this.vcanvas.getContext(`2d`)

		this.colorMap = light([`#898AD4`,`#A7DAD7`,`#EEEEEE`,`#FFEA9E`,`#FA8652`])
		this.imageMap = light(`inferno`)
		this.plusMap = light(`fire`)
		this.minusMap = light(`ice`).reverse()

		this.poly = [`x`,`y`,`xy`,`x²`,`y²`,`x³`,`y³`,`x²y`,`y²x`,`x⁴`,`y⁴`,`x³y`,`y³x`,`x²y²`]
		this.layernames = [`input`, `second`, `third`, `fourth`, `fifth`]
		this.nn = new Skynet({
			layers: [14,8,4,1]
		})
		this.f = 1
		this.trainData = []
		this.points = []
		this.currentMatrixId = false

		this.initGraphics()

		this.setListeners()

		this.update()
	}

	initGraphics(){
		this.graphics = {
			maxItems: 14,
			yspan: this.h * .55,
			xspan: this.w * .9,
			marginx: this.w * .01,
			marginy: this.h * .01,
			unit: this.ratio * 18,
			wratio: 4
		}
		this.graphics.stepx = (this.graphics.xspan - this.graphics.marginx * 2) / (this.nn.layers.length - 1)
		this.graphics.stepy = (this.graphics.yspan - this.graphics.marginy * 2) / (this.graphics.maxItems - 1)
	}

	shuffle(a){
	    for (var i = a.length - 1; i > 0; i--) {
	        var j = Math.floor(Math.random() * (i + 1))
	        var v = a[i]
	        a[i] = a[j]
	        a[j] = v
	    }
	}

	setListeners(){
		this.canvas.addEventListener(`mousedown`, e=>{

			const x = e.offsetX * this.ratio
			const y = e.offsetY * this.ratio

			if (x > this.vcanvas.position.x && x < this.vcanvas.position.x + this.vcanvas.width / this.vcanvas.scale && y > this.vcanvas.position.y && y < this.vcanvas.position.y + this.vcanvas.height / this.vcanvas.scale){

				const point = {
					class: e.button === 0 ? 0 : 1, 
					position: {
						x: (x - this.vcanvas.position.x) / (this.vcanvas.width / this.vcanvas.scale) * 2 - 1, 
						y: (y - this.vcanvas.position.y) / (this.vcanvas.width / this.vcanvas.scale) * 2 - 1
					}
				}
				this.points.push(point)
				
				const data = {}
				data.values = new Matrix(1,14).setFromArray(this.getPolynomialArray(point.position.x, point.position.y))
				data.targets = new Matrix(1,1).setFromArray([point.class === 0 ? -1 : 1])

				this.trainData.push(data)

			}

		})

		this.canvas.addEventListener(`mousemove`, e=>{

			const x = e.offsetX * this.ratio
			const y = e.offsetY * this.ratio
			this.currentNodeIJ = false
			this.currentMatrixId = false

			for (let i = 0; i < this.nn.layers.length; i++){

				if (x > this.graphics.marginx + this.graphics.stepx * i && x < this.graphics.marginx + this.graphics.unit * this.graphics.wratio + this.graphics.stepx * i){
					
					const l = this.nn.layers[i]
					const ldy = (this.graphics.maxItems - l.values.array.length) * this.graphics.stepy / 2

					for (let j = 0; j < l.values.array.length; j++){

						if (y > this.graphics.marginy + this.graphics.stepy * j + ldy && y < this.graphics.marginy + this.graphics.unit + this.graphics.stepy * j + ldy){

							this.currentNodeIJ = [i, j]
							break

						}

					}

				}
				
				if (y < this.graphics.yspan + this.graphics.unit && x > this.graphics.marginx + this.graphics.stepx * i && x < this.graphics.marginx + this.graphics.stepx * (i+1)){
					this.currentMatrixId = Math.min(i, this.nn.layers.length - 2)
				}

			}

		})
	}

	getPolynomialArray(x, y){
		return [x, y, x * y, x ** 2, y ** 2, x ** 3, y ** 3, x ** 2 * y, y ** 2 * x, x ** 4, y ** 4, x ** 3 * y, y ** 3 * x, x ** 2 * y ** 2]
	}

	update(){

		requestAnimationFrame(_=>{this.update()})

		this.ctx.clearRect(0, 0, this.w, this.h)

		this.drawNetwork()
		this.drawPredictions()

		for (let i = 0; i < 32; i++){
			this.useTrainData()
		}

		this.drawMatrices()

	}

	useTrainData(){

		// this.shuffle(this.trainData)

		for (let i of this.trainData){
			this.nn.train(i.values, i.targets)
		}
		this.nn.applyAdjustments()

	}

	drawMatrices(){

		if (this.currentMatrixId !== false){

			const yspan = this.h * .4
			const xspan = this.w - this.vcanvas.width / this.vcanvas.scale
			const unit = yspan * .8
			const margin = xspan / this.nn.layers.length * .2
			const columnWidth = unit * .2
			

			this.ctx.save()
			this.ctx.translate(0, this.h - yspan + (yspan - unit) * .5)

			this.ctx.translate(margin * 2, 0)
			this.ctx.font = this.ratio * 18 + `px Condensed`
			this.ctx.fillStyle = `#7Af`
			// this.ctx.fillText(`tanh`, -margin * .5, unit * .5)
			this.ctx.fillText(`Activation after ${this.layernames[this.currentMatrixId]} layer transformation`, xspan * .35, -margin * .9)
			this.ctx.fillStyle = `#000`
			this.ctx.translate(margin * .2, 0)
			this.ctx.save()
			this.ctx.strokeStyle = `#7Af`
			this.ctx.lineWidth = this.ratio * 2
			this.ctx.strokeRect(0, -margin * .5, margin * 3 + unit + 2 * columnWidth, unit + margin * 1.3)
			this.ctx.restore()

			const highlight = this.currentNodeIJ ? this.currentNodeIJ[0] === this.currentMatrixId ? this.currentNodeIJ[1] : false : false

			this.ctx.translate(margin * .5, 0)
			this.drawMatrix(this.nn.layers[this.currentMatrixId].weights, unit, unit, 10, highlight, false, `Weights between ${this.currentMatrixId + 1} and ${this.currentMatrixId + 2} layer`)
			this.ctx.translate(unit + margin, 0)
			this.drawMatrixSymbol(`×`, -margin * .5, unit * .5)
			this.drawMatrix(this.nn.layers[this.currentMatrixId].values, columnWidth, unit, 100, false, highlight, `Layer ${this.currentMatrixId + 1} output`)
			this.ctx.translate(margin + columnWidth, 0)
			this.drawMatrixSymbol(`+`, -margin * .5, unit * .5)
			this.drawMatrix(this.nn.layers[this.currentMatrixId + 1].biases, columnWidth, unit, 100, false, false, `Layer ${this.currentMatrixId + 2} biases`)
			this.ctx.translate(margin * 1.5 + columnWidth, 0)
			this.drawMatrixSymbol(`=`, -margin * .5, unit * .5)
			this.drawMatrix(this.nn.layers[this.currentMatrixId + 1].values, columnWidth, unit, 100, false, false, `Layer ${this.currentMatrixId + 2} output`)

			this.ctx.restore()

		}

	}

	// drawMatrixBrace(type, w, h){

	// 	this.ctx.save()
	// 	this.ctx.translate(w * .5, h * .5)
	// 	this.ctx.font = w + `px monospace`
	// 	this.ctx.scale(1, h / w)
	// 	this.ctx.fillText(type === `left` ? `(` : `)`, 0, 0)
	// 	this.ctx.restore()

	// }

	drawMatrixSymbol(s, x, y){
		this.ctx.font = this.ratio * 18 + `px monospace`
		this.ctx.fillText(s, x, y)
	}

	drawMatrix(m, w, h, precision, highlightColumn, highlightRow, label){

		const dx = w / (m.w + 1)
		const dy = h / m.h
		const serif = h * .02

		this.ctx.save()

		if (highlightColumn !== false){

			this.ctx.fillStyle = `#FC6`
			this.ctx.fillRect(dx * highlightColumn + dx * .5, 0, dx, h)
			this.ctx.fillStyle = `#000`

		}

		if (highlightRow !== false){

			this.ctx.fillStyle = `#FC6`
			this.ctx.fillRect(0, dy * highlightRow, w, dy)
			this.ctx.fillStyle = `#000`

		}

		this.ctx.beginPath()
		this.ctx.moveTo(serif, 0)
		this.ctx.lineTo(0, 0)
		this.ctx.lineTo(0, h)
		this.ctx.lineTo(serif, h)
		this.ctx.stroke()

		this.ctx.beginPath()
		this.ctx.moveTo(w - serif, 0)
		this.ctx.lineTo(w, 0)
		this.ctx.lineTo(w, h)
		this.ctx.lineTo(w - serif, h)
		this.ctx.stroke()

		this.ctx.font = dx * .6 + `px Condensed`

		for (let i = 0; i < m.array.length; i++){
			const x = (i % m.w)
			const y = Math.floor(i / m.w)
			this.ctx.fillText(Math.floor(m.array[i] * precision) / precision, dx * x + dx, dy * y + dy * .5)
		}

		if (label){
			this.ctx.font = this.ratio * 10 + `px Condensed`
			this.ctx.fillText(label, w * .5, h + h * .05)
		}

		this.ctx.restore()

	}

	drawPredictions(){

		const pixels = this.vctx.createImageData(this.vcanvas.width, this.vcanvas.height)

		for (let i = 0; i < pixels.data.length; i += 4){

			const x = ((i / 4) % this.vcanvas.width) / this.vcanvas.width * 2 - 1
			const y = Math.floor((i / 4) / this.vcanvas.width) / this.vcanvas.height * 2 - 1
			let v = 0

			this.nn.feedForward(new Matrix(1,14).setFromArray(this.getPolynomialArray(x,y)))
			if (!this.currentNodeIJ) {
				
				v = this.nn.getResultArray()[0]
			} else {

				// v = this.nn.getSignalFromNode(this.currentNodeIJ[0], this.currentNodeIJ[1])
				v = this.nn.layers[this.currentNodeIJ[0]].values.array[this.currentNodeIJ[1]]

			}

			
			const c = this.imageMap.rawrgb(v * .5 + .5)

			pixels.data[i] = c[0]
			pixels.data[i + 1] = c[1]
			pixels.data[i + 2] = c[2]
			pixels.data[i + 3] = 255

		}
		this.vctx.putImageData(pixels, 0, 0)

	}

	drawNetwork(){

		const l = this.nn.layers

		this.ctx.save()
		this.ctx.translate(this.graphics.marginx, this.graphics.marginy)

		for (let i = 0; i < l.length; i++){

			const dx = this.graphics.stepx * i
			const ldy = (this.graphics.maxItems - l[i].values.array.length) * this.graphics.stepy / 2
			const ldy2 = (i < l.length - 1) ? (this.graphics.maxItems -  l[i+1].values.array.length) * this.graphics.stepy / 2 : 0

			if (l[i].weights){
				for (let k = 0; k < l[i].weights.array.length; k++){

					const dx1 = dx + this.graphics.unit * this.graphics.wratio
					const dx2 = dx1 + this.graphics.stepx - this.graphics.unit * this.graphics.wratio
					const dy1 = ldy + this.graphics.stepy * (Math.floor(k / l[i].weights.h)) + this.graphics.unit * .5
					const dy2 = ldy2 + this.graphics.stepy * (k % l[i].weights.h) + this.graphics.unit * .5

					// this.ctx.strokeStyle = `#999`
					this.ctx.strokeStyle = this.colorMap.rgb(l[i].weights.array[k] * .5 + .5)
					this.ctx.lineWidth = Math.min(this.graphics.unit * .1 * Math.abs(l[i].weights.array[k]), this.graphics.unit * .1)
					this.ctx.beginPath()
					this.ctx.moveTo(dx1, dy1)
					// this.ctx.lineTo(dx2, dy2)
					this.ctx.bezierCurveTo(dx1 + this.graphics.stepx * .25, dy1, dx2 - this.graphics.stepx * .25, dy2, dx2, dy2)
					this.ctx.stroke()

				}
			}

			const cut = this.graphics.unit * .2
			const uw = this.graphics.unit * this.graphics.wratio * .65

			for (let j = 0; j < l[i].values.array.length; j++){

				const dy = this.graphics.stepy * j + ldy
				
				// this.ctx.fillStyle = `#a1dac8`
				this.ctx.fillStyle = `#FFF`
				// this.ctx.fillStyle = this.colorMap.rgb(l[i].values.array[j] * .5 + .5)
				this.ctx.fillRect(dx, dy, this.graphics.unit * this.graphics.wratio, this.graphics.unit)
				if (this.currentNodeIJ && this.currentNodeIJ[0] === i && this.currentNodeIJ[1] === j){
					this.ctx.strokeStyle = `#FC6`
					this.ctx.lineWidth = this.ratio * 2
					this.ctx.strokeRect(dx - this.ratio, dy - this.ratio, this.graphics.unit * this.graphics.wratio + this.ratio * 2, this.graphics.unit + this.ratio * 2)
				}

				if (i > 0){
					this.ctx.fillStyle = `#e0dddb`
					// this.ctx.fillRect(dx, dy, unit * wratio * .65, unit)
					this.ctx.beginPath()
					this.ctx.moveTo(dx, dy)
					this.ctx.lineTo(dx + uw - cut, dy)
					this.ctx.lineTo(dx + uw, dy + this.graphics.unit * .5)
					this.ctx.lineTo(dx + uw - cut, dy + this.graphics.unit)
					this.ctx.lineTo(dx, dy + this.graphics.unit)
					this.ctx.closePath()
					this.ctx.fill()

					this.ctx.fillStyle = l[i].preactivation ? this.colorMap.rgb(l[i].preactivation.array[j] * .5 + .5) : `#FFF`
					// this.ctx.fillStyle = `#FFF`
					this.ctx.fillRect(dx, dy, this.graphics.unit * this.graphics.wratio * .3, this.graphics.unit)
				} else {
					this.ctx.fillStyle = `#FFF`
					this.ctx.fillRect(dx, dy, this.graphics.unit * this.graphics.wratio * .5, this.graphics.unit)
				}

				this.ctx.fillStyle = `#000`
				if (i > 0) {
					const bias = Math.floor(l[i].biases.array[j] * 100) / 100
					this.ctx.fillText(bias < 0 ? bias : `+` + bias, dx + this.graphics.unit * this.graphics.wratio * .45, dy + this.graphics.unit * .5)
					if (l[i].preactivation) this.ctx.fillText(Math.floor(l[i].preactivation.array[j] * 100) / 100, dx + this.graphics.unit * this.graphics.wratio * .15, dy + this.graphics.unit * .5)
				} else {
					this.ctx.fillStyle = `#0009`
					this.ctx.fillText(`${this.poly[j]}      →`, dx + this.graphics.unit * this.graphics.wratio * .25, dy + this.graphics.unit * .5)
				}
				if (i === l.length - 1) this.ctx.fillText(`→`, dx + this.graphics.unit * this.graphics.wratio * 1.25, dy + this.graphics.unit * .5)
				this.ctx.fillStyle = `#000`
				this.ctx.fillText(Math.floor(l[i].values.array[j] * 100) / 100, dx + this.graphics.unit * this.graphics.wratio * .8, dy + this.graphics.unit * .5)

			}

		}

		if (this.currentMatrixId !== false){
			this.ctx.save()
			this.ctx.strokeStyle = `#7Af`
			this.ctx.setLineDash([this.ratio * 5, this.ratio * 5])
			this.ctx.lineWidth = this.ratio
			this.ctx.strokeRect(-this.graphics.marginx * .5 + this.currentMatrixId * this.graphics.stepx + this.graphics.unit * 2.8, -this.graphics.marginx * .5, this.graphics.stepx + 0, this.graphics.yspan + this.graphics.marginx * 1.5)
			this.ctx.restore()
		}

		this.ctx.restore()


		//Data
		const UNIT = this.vcanvas.width

		// this.vctx.fillRect(0,0,UNIT,UNIT)

		this.ctx.drawImage(this.vcanvas, this.vcanvas.position.x, this.vcanvas.position.y, UNIT / this.vcanvas.scale, UNIT / this.vcanvas.scale)

		this.ctx.save()
		this.ctx.translate(this.vcanvas.position.x, this.vcanvas.position.y)
		for (let p of this.points){

			this.ctx.fillStyle = p.class === 0 ? `#FFC` : `#112`
			this.ctx.beginPath()
			this.ctx.arc((p.position.x * .5 + .5) * UNIT / this.vcanvas.scale, (p.position.y * .5 + .5) * UNIT / this.vcanvas.scale, this.ratio * 2, 0, Math.PI * 2)
			this.ctx.closePath()
			this.ctx.fill()

		}
		this.ctx.restore()


	}

	getTrainData(){

		const data = []

		for (let i of this.trainData){

			data.push({values: i.values.array, target: i.targets.array})

		}

		return JSON.stringify(data)

	}

	loadTrainData(data){

		this.trainData = []
		this.points = []

		for (let d of data){
			const point = {
				class: d.target[0] === 1 ? 1 : 0, 
				position: {
					x: d.values[0], 
					y: d.values[1]
				}
			}
			this.points.push(point)

			const chunk = {}
			chunk.values = new Matrix(1,14).setFromArray(d.values)
			chunk.targets = new Matrix(1,1).setFromArray(d.target)

			this.trainData.push(chunk)

		}

	}

}

class Skynet {

	constructor(a){

		this.activation = v=>Math.tanh(v)
		this.activationDer = v=>1-(Math.tanh(v)**2)
		this.poly = [`x`,`y`,`xy`,`x²`,`y²`,`x³`,`y³`,`x²y`,`y²x`,`x⁴`,`y⁴`,`x³y`,`y³x`,`x²y²`]

		// this.activation = v=>v>0?v:0
		// this.activationDer = v=>v<=0?0:1

		this.learningRate = .005
		this.regularizationRate = 0

		this.buildLayers(a.layers || [2,2,2])

	}

	getGenerator(stdev){

		let y2
		let use_last = false
		return function() {
		    let y1
		    if (use_last) {
		       y1 = y2
		       use_last = false
		    }
		    else {
		        let x1, x2, w
		        do {
		             x1 = 2.0 * Math.random() - 1.0
		             x2 = 2.0 * Math.random() - 1.0
		             w  = x1 * x1 + x2 * x2              
		        } while (w >= 1.0)
		        w = Math.sqrt((-2.0 * Math.log(w))/w)
		        y1 = x1 * w
		        y2 = x2 * w
		        use_last = true
		   }

		   let retval = stdev * y1
		   return retval
		}

	}

	buildLayers(l){

		this.layers = []

		for (let i = 0; i < l.length; i++){

			const generator = this.getGenerator((1 / l[i]) ** .5)

			this.layers.push({
				values: new Matrix(1,l[i]),
				biases: new Matrix(1, l[i]).setFromGenerator(generator),
				weights: i === l.length - 1 ? false : new Matrix(l[i],l[i+1]).setFromGenerator(generator),
				db: [],
				dw: []
			})

		}

	}

	feedForward(v){

		if (v.array.length === this.layers[0].values.h){

			this.layers[0].values.copyFrom(v)

			for (let i = 0; i < this.layers.length - 1; i++){

				const l = this.layers[i]
				const n = this.layers[i+1]
				n.preactivation = l.weights.multiply(l.values).sum(n.biases)
				n.values = this.activate(n.preactivation)

			}
			
		} else {
			console.log(`Activation vector mismatch`)
		}

	}

	backPropagate(mi, mc){
		//Errors from training data
		const lastLayer = this.layers[this.layers.length - 1]

		lastLayer.errors = new Matrix(1, lastLayer.values.array.length)
		lastLayer.activationDers = this.activate(lastLayer.values, true) //new Matrix(lastLayer.preactivation.array.length, 1)

		for (let i = 0; i < lastLayer.values.array.length; i++){
			lastLayer.errors.array[i] = 2 * (mc.array[i] - lastLayer.values.array[i])
			// lastLayer.activationDer[i] = this.activationDer(lastLayer.preactivation.array[i])
		}
		for (let li = this.layers.length - 2; li >= 0; li--){

			const l = this.layers[li]

			const wtransposed = l.weights.getTransposed()
			// const regularization = wtransposed.getAbsoluteColumn().multiply(-.01 / wtransposed.h)
			
			l.errors = wtransposed.multiply(this.layers[li + 1].errors)//.sum(regularization)
			l.activationDers = this.activate(l.values, true)


		}


		//Adjusting weight and biases
		for (let i = 1; i < this.layers.length; i++){

			const db = this.layers[i].errors.multiply(this.learningRate).elementWise(this.layers[i].activationDers)
			const dw = db.multiply(this.layers[i - 1].values.getTransposed())

			//REGULARIZATION
			for (let j = 0; j < dw.array.length; j++){

				dw.array[j] += -this.layers[i-1].weights.array[j] / this.layers[i-1].weights.h * this.regularizationRate * this.learningRate

			}

			this.layers[i].db.push(db)
			this.layers[i-1].dw.push(dw)
			
			// this.layers[i].biases = this.layers[i].biases.sum(db)
			// this.layers[i-1].weights = this.layers[i-1].weights.sum(dw)

		}
	}

	applyAdjustments(){

		for (let i = 0; i < this.layers.length; i++){

			const l = this.layers[i]

			if (l.db.length){
				
				let db = new Matrix(l.biases.w, l.biases.h)
				for (let j = 0; j < l.db.length; j++){
					db = db.sum(l.db[j])
				}
				db.multiply(1/l.db.length)
				l.biases = l.biases.sum(db)

				l.db = []

			}

			if (l.dw.length){
				
				let dw = new Matrix(l.weights.w, l.weights.h)
				for (let j = 0; j < l.dw.length; j++){
					dw = dw.sum(l.dw[j])
				}
				dw.multiply(1/l.dw.length)
				l.weights = l.weights.sum(dw)

				l.dw = []
			}

		}

	}

	train(mi, mc){

		// this.feedForward(mi)

		this.feedForward(mi)
		this.backPropagate(mi, mc)
		

	}

	activate(m, back){

		const result = new Matrix(m.w, m.h)

		for (let i = 0; i < result.array.length; i++){
			result.array[i] = back ? this.activationDer(m.array[i]) : this.activation(m.array[i])
		}

		return result

	}

	getResultArray(){

		return this.layers[this.layers.length - 1].values.array

	}

	randomizeWB(){

		for (let l of this.layers){

			const generator = this.getGenerator((1 / l.biases.h) ** .5)

			if (l.biases) l.biases = new Matrix(l.biases.w, l.biases.h).setFromGenerator(generator)
			if (l.weights) l.weights = new Matrix(l.weights.w, l.weights.h).setFromGenerator(generator)

		}

	}

	getFormula(){

		let formula = ``
		const intermediates = []

		for (let i = 0; i < this.layers.length - 1; i++){

			intermediates[i] = []

			if (i === 0){

				for (let j = 0; j < this.layers[i].weights.h; j++){

					let currentInter = ``
					currentInter += `tanh(`

					for (let k = 0; k < this.layers[i].weights.w; k++){

						currentInter += `${this.poly[k]} ⋅ ${this.layers[i].weights.array[k + j * this.layers[i].weights.w]}${k < this.layers[i].weights.w - 1 ? ' + ' : ''}`

					}

					const bias = this.layers[i+1].biases.array[j]
					currentInter += `${bias < 0 ? ' - ' + -bias : ' + ' + bias})`
					intermediates[i].push(currentInter)
					

				}

			} else {

				for (let j = 0; j < this.layers[i].weights.h; j++){

					let currentInter = ``
					currentInter += `tanh(`

					for (let k = 0; k < this.layers[i].weights.w; k++){

						currentInter += `${intermediates[i - 1][j]} ⋅ ${this.layers[i].weights.array[k + j * this.layers[i].weights.w]}${k < this.layers[i].weights.w - 1 ? ' + ' : ''}`

					}

					const bias = this.layers[i+1].biases.array[j]
					currentInter += `${bias < 0 ? ' - ' + -bias : ' + ' + bias})`
					intermediates[i].push(currentInter)
					

				}

			}


		}

		return `class = ` + intermediates[intermediates.length - 1][0]

	}

}

class Matrix{

	constructor(x,y){

		this.array = []
		this.w = x
		this.h = y
		for (let i = 0; i < x*y; i++){
			this.array.push(0)
		}

	}

	copyFrom(m){

		for (let i = 0; i < this.array.length; i++){

			this.array[i] = m.array[i]

		}

		return this

	}

	setFromArray(a){
		for (let i = 0; i < a.length; i++){
			this.array[i] = a[i]
		}
		return this
	}

	setRandom(){
		for (let i = 0; i < this.array.length; i++){
			this.array[i] = Math.random() * 2 - 1
		}
		return this
	}

	setFromGenerator(g){
		for (let i = 0; i < this.array.length; i++){
			this.array[i] = g()
		}
		return this
	}

	getTransposed(){


		const result = new Matrix(this.h, this.w)

		for (let i = 0; i < this.array.length; i++){

			const rx = Math.floor(i / this.w)
			const ry = i % this.w

			result.array[rx + this.h * ry] = this.array[i]

		}

		return result

	}

	getAbsoluteColumn(){

		const result = new Matrix(1, this.h)
		result.array = []

		for (let i = 0; i < this.h; i++){

			let sum = 0
			for (let j = 0; j < this.w; j++){
				sum += Math.abs(this.array[j + i * this.w])
			}
			result.array.push(sum)

		}

		return result

	}

	multiply(m){

		let result

		if (m instanceof Matrix){

			result = new Matrix(m.w, this.h)
			result.array = []

			for (let i = 0; i < this.h; i++){
				for (let j = 0; j < m.w; j++){

					let sum = 0
					for (let k = 0; k < this.w; k++){
						sum += this.array[k + i * this.w] * m.array[j + k * m.w]
					}
					result.array.push(sum)

				}
			}

		} else {

			result = new Matrix(this.w, this.h)

			for (let i = 0; i < this.array.length; i++){

				result.array[i] = this.array[i] * m

			}

		}

		return result

	}

	elementWise(m){

		if (this.w === m.w && this.h === m.h){

			const result = new Matrix(this.w, this.h)
			for (let i = 0; i < this.array.length; i++){
				result.array[i] = this.array[i] * m.array[i]
			}

			return result

		}

	}

	sum(m){

		if (this.w === m.w && this.h === m.h){

			const result = new Matrix(this.w, this.h)
			for (let i = 0; i < this.array.length; i++){
				result.array[i] = this.array[i] + m.array[i]
			}
			return result

		} else {
			console.log(`Dimensions mismatch in sum`)
		}

	}

}
