let core

window.onload = _=>{

	const s = new Range({width: 500, value: 12.2, class: `input`, min: 0, max: 50, scale: 4, label: `Simulation speed`, labelWidth: 200, step: .01, log: 4})

	document.body.appendChild(s)

	core = new Core(document.querySelector(`.canvas`))

	s.data.onchange = v=>{
		core.setSpeed(v)
	}

}

class Core{

	constructor(canvas) {

		this.canvas = canvas
		this.ratio = devicePixelRatio
		this.canvas.width = this.w = this.canvas.offsetWidth * this.ratio
		this.canvas.height = this.h = this.canvas.offsetHeight * this.ratio
		this.ctx = this.canvas.getContext(`2d`)
		this.ctx.font = 4 * this.ratio + `px Tahoma`
		this.ctx.lineWidth = this.ratio
		this.ctx.textBaseline = `middle`
		this.ctx.textAlign = `center`

		this.bwMap = light()
		this.plusMap = light(`fire`)
		this.minusMap = light(`ice`).reverse()

		this.current = {}

		this.frame = {
			x: 0,
			y: 0
		}

		this.f = 0
		this.df = .000002

		this.field = {
			x: 80 * this.ratio, 
			y: 260 * this.ratio,
			cellSize: 10 * this.ratio
		}
		this.field2 = {
			x: 400 * this.ratio + 65 * this.ratio, 
			y: 260 * this.ratio + 65 * this.ratio,
			cellSize: 10 * this.ratio
		}

		this.inter = {
			x: 155 * this.ratio,
			y: 110 * this.ratio,
			s: 4,
			x1: 520 * this.ratio,
			y1: 150 * this.ratio
		}

		this.initImage()

	}

	setSpeed(s){

		this.df = s * .00001

	}

	initImage(){

		// this.source = new Image()
		// this.source.src = `img/source.png`
		// this.source.onload = _=>{

		// 	const c = document.createElement(`canvas`)
		// 	c.width = 28
		// 	c.height = 28
		// 	const ctx = c.getContext(`2d`)

		// 	ctx.drawImage(this.source, 0, 0)
		// 	const pixels = ctx.getImageData(0, 0, 28, 28)
		// 	const vector = []

		// 	for (let i = 0; i < pixels.data.length; i += 4){
		// 		vector.push(pixels.data[i] / 255)
		// 	}

		// 	this.data = vector

		// 	this.updateCurrentData()
		// 	this.update()

		// }

		this.data = [-1.0941176470588236,-0.4117647058823528,0.2705882352941177,-0.12549019607843137,-0.0039215686274510775,-0.1098039215686275,-0.10588235294117632,0.0039215686274509665,0.03137254901960784,-0.1333333333333333,-0.0980392156862746,0.6117647058823529,0.8313725490196079,0.21568627450980388,-0.6000000000000001,-0.580392156862745,-0.32941176470588235,0.03137254901960773,0.09019607843137245,-0.2313725490196078,0.0039215686274509665,0.02352941176470591,1.1102230246251565e-16,0.38431372549019616,0.8627450980392157,0.584313725490196,-1.6549019607843136,-1.388235294117647,-0.04313725490196077,-0.13333333333333333,-0.050980392156862786,0.027450980392156876,-0.0117647058823529,-0.0431372549019608,0.019607843137254888,-0.04313725490196077,0.2980392156862745,1.168627450980392,1.4705882352941173,0.3647058823529413,-0.9019607843137254,-1.3411764705882354,-0.9098039215686274,-0.06274509803921571,0.05098039215686272,-0.10980392156862745,-0.03529411764705881,0.03137254901960784,0.1254901960784314,0.8313725490196078,1.43921568627451,0.8117647058823529,-1.1137254901960782,-1.1333333333333333,-0.5333333333333334,-0.7372549019607844,-0.2627450980392157,0,0,0,0.023529411764705882,0.3686274509803922,1.1529411764705881,1.4745098039215687,0.9803921568627448,0.015686274509803977,-0.6549019607843136,-1.180392156862745,-0.9529411764705882,-0.6588235294117647,-0.5490196078431373,-0.0196078431372549,0.054901960784313725,0.403921568627451,0.5568627450980392,0.9411764705882353,1.0666666666666667,0.4862745098039217,-0.43529411764705883,-0.0980392156862746,-0.5450980392156863,-1.6980392156862745,-0.9372549019607843,-0.13333333333333333,0,0,0.047058823529411764,0.9137254901960785,1.9686274509803923,1.1529411764705881,0.027450980392156765,-0.29803921568627456,-0.3215686274509802,-0.38431372549019616,-0.40392156862745104,-1.3450980392156864,-1.3176470588235294,-0.0392156862745098,0.40784313725490196,1.3215686274509804,1.0196078431372548,0.32156862745098036,0.23529411764705876,0.12549019607843148,-0.19999999999999996,0.180392156862745,-0.235294117647059,-1.5333333333333337,-1.4941176470588233,-0.6666666666666667,-0.03529411764705882,0,0.023529411764705882,0.8392156862745098,2.1215686274509804,1.0941176470588234,-0.14901960784313745,-0.27843137254901956,-0.3607843137254901,0.06666666666666671,-0.4392156862745098,-1.7019607843137257,-1.196078431372549,0.19215686274509802,1.035294117647059,1.6235294117647059,0.7803921568627451,-0.0117647058823529,0.05098039215686273,0.039215686274509776,0.019607843137254943,-0.035294117647058865,-0.1843137254901962,-0.4862745098039216,-1.2745098039215685,-1.4980392156862745,-0.4,0,0,0.29411764705882354,1.5568627450980395,1.5215686274509805,0.44313725490196076,-0.11764705882352944,-0.3450980392156863,-0.09411764705882342,-1.196078431372549,-1.603921568627451,-0.407843137254902,0.8313725490196078,1.3529411764705883,0.8313725490196078,0.37254901960784303,0.2039215686274511,-0.015686274509803977,0.047058823529411486,0.26274509803921575,-0.015686274509803866,-0.4392156862745098,0.027450980392156876,-0.39607843137254894,-1.9137254901960783,-1.168627450980392,-0.12941176470588237,0,0.023529411764705882,0.6470588235294118,1.6117647058823528,1.419607843137255,0.24705882352941172,-0.3137254901960785,-0.9882352941176471,-1.6862745098039216,-0.8941176470588236,0.4666666666666667,1.5176470588235293,0.8705882352941177,0.02352941176470591,0.4901960784313725,0.18039215686274512,-0.30588235294117644,0.18431372549019603,0.3215686274509805,0.09019607843137256,-0.5019607843137257,-0.0509803921568629,0.16078431372549007,-1.3764705882352941,-1.7019607843137252,-0.7333333333333334,-0.03137254901960784,0,0.09803921568627451,1.1098039215686275,1.9490196078431372,0.803921568627451,-0.6313725490196078,-1.7254901960784312,-1.415686274509804,-0.03529411764705881,1.2509803921568627,1.6470588235294117,0.18039215686274512,-0.09411764705882336,0.6745098039215687,0.19215686274509797,-0.39215686274509814,0.16078431372549024,0.207843137254902,0.12549019607843137,-0.396078431372549,-0.06666666666666665,0.3568627450980392,-0.4745098039215687,-1.6235294117647059,-1.6274509803921569,-0.34509803921568627,0,0,0.4117647058823529,1.7254901960784315,1.164705882352941,-1.0784313725490196,-1.5764705882352943,-0.5921568627450979,0.6470588235294118,1.419607843137255,1.0941176470588234,0.23529411764705876,0.015686274509803977,0.3254901960784313,0.5058823529411764,-0.06274509803921569,-0.30980392156862746,0.08627450980392143,0.1725490196078432,-0.4862745098039215,-0.20392156862745087,0.607843137254902,-0.047058823529411764,-1.0470588235294118,-1.9764705882352944,-1.0509803921568628,-0.050980392156862744,0,0.047058823529411764,1.0431372549019606,0.8941176470588235,-0.9333333333333333,-0.9411764705882353,0.47058823529411764,1.227450980392157,0.9921568627450982,0.6823529411764706,0.5529411764705882,-0.32549019607843144,-0.3176470588235294,0.588235294117647,0.3176470588235294,-0.4274509803921568,0.1333333333333333,0.14901960784313706,-0.4745098039215687,-0.29803921568627434,0.4352941176470588,-0.047058823529411764,-0.39999999999999997,-1.450980392156863,-1.5921568627450982,-0.4862745098039216,-0.023529411764705882,0,0.32941176470588235,0.3647058823529412,-0.32941176470588235,-0.1647058823529412,1.4431372549019608,1.3254901960784315,0.3686274509803922,0.6862745098039217,0.43529411764705866,-0.7098039215686276,-0.49411764705882333,0.47058823529411764,0.2196078431372549,-0.188235294117647,0.14117647058823535,0.12549019607843137,-0.3411764705882353,-0.10980392156862745,0.04313725490196074,-0.05098039215686273,-0.0039215686274510775,-0.4274509803921569,-1.4352941176470588,-1.396078431372549,-0.3764705882352941,0,0.023529411764705882,0.07450980392156863,0.01568627450980392,0.8470588235294119,1.772549019607843,0.7176470588235295,-0.03529411764705881,0.46274509803921565,0.2862745098039214,-0.39607843137254906,-0.1647058823529411,0.3372549019607842,-0.19215686274509808,-0.20784313725490183,0.05098039215686262,0.2509803921568628,-0.29803921568627445,-0.04313725490196085,-0.03529411764705881,0.0039215686274510775,0.2509803921568627,0.1215686274509803,-0.8431372549019606,-1.9254901960784312,-1.0823529411764707,-0.01568627450980392,0,0,0.0784313725490196,1.5490196078431373,1.6901960784313725,0.20392156862745087,-0.10196078431372552,-0.007843137254901933,0.3215686274509803,0.27058823529411774,-0.10196078431372546,0.17647058823529393,-0.18039215686274512,-0.3333333333333331,0.03137254901960773,0.44705882352941173,-0.08235294117647052,0.03529411764705892,-0.04313725490196074,-0.0666666666666666,0.18431372549019603,-0.015686274509804088,-0.5960784313725488,-1.8509803921568628,-1.3372549019607842,-0.03137254901960784,0,0,0.0392156862745098,1.1529411764705881,1.592156862745098,0.6745098039215687,0.17254901960784325,-0.22745098039215672,0.13725490196078416,0.5333333333333333,-0.1686274509803921,-0.0078431372549021,0.12941176470588228,-0.1843137254901961,0.027450980392156876,0.5647058823529412,0.16078431372549012,0.1725490196078432,-0.1098039215686274,-0.18823529411764695,-0.1529411764705883,-0.38431372549019605,-0.980392156862745,-1.5686274509803921,-0.788235294117647,-0.01568627450980392,-0.027450980392156862,0,0,0.34509803921568627,1.2274509803921567,1.5529411764705883,0.6823529411764707,0.027450980392156987,-0.007843137254902044,0.17254901960784308,-0.207843137254902,-0.18431372549019598,0.14509803921568626,0.11372549019607847,0.11372549019607836,0.1843137254901962,0.007843137254901988,0.32156862745098025,-0.09019607843137245,-0.21960784313725457,-0.25098039215686296,-1.2000000000000002,-1.5137254901960784,-0.8666666666666667,0.23137254901960785,0.14901960784313725,-0.4392156862745098,-0.14901960784313725,0,0.0196078431372549,0.611764705882353,1.772549019607843,1.184313725490196,0.43137254901960803,0.22352941176470575,-0.1647058823529413,-0.2313725490196079,-0.22352941176470592,-0.09803921568627444,0.1176470588235295,-0.019607843137254943,-0.2509803921568627,-0.01176470588235301,0.29411764705882343,-0.1647058823529411,-0.06666666666666643,-0.403921568627451,-1.8980392156862746,-1.4078431372549018,-0.054901960784313725,1.3098039215686275,0.6705882352941176,-1.2823529411764707,-0.8,-0.027450980392156862,0,0.1411764705882353,1.1803921568627451,1.556862745098039,0.8039215686274511,0.21960784313725484,-0.011764705882353121,0.1411764705882354,-0.06274509803921557,-0.3254901960784313,-0.06666666666666665,-0.36078431372549014,-0.08235294117647063,0.35686274509803906,-0.06666666666666665,-0.22745098039215683,-0.13333333333333325,-1.2352941176470589,-1.6862745098039216,-0.5450980392156863,0.6784313725490196,1.8117647058823527,0.8823529411764706,-1.5137254901960782,-1.56078431372549,-0.3647058823529412,0,0,0.42745098039215684,1.3607843137254902,1.219607843137255,0.28627450980392155,0.29803921568627456,0.4745098039215688,0.0117647058823529,-0.3764705882352943,-0.1607843137254903,-0.2705882352941177,0.14901960784313728,0.40784313725490184,-0.3372549019607843,-0.28627450980392144,-0.8392156862745097,-1.8705882352941177,-0.8431372549019608,0.2901960784313725,1.423529411764706,1.6509803921568627,0.34509803921568627,-0.8078431372549018,-1.6549019607843136,-1.2039215686274511,-0.11372549019607843,0,0.06274509803921569,0.6235294117647059,1.3215686274509804,1.156862745098039,0.6549019607843138,0.227450980392157,-0.2313725490196079,-0.1607843137254903,-0.1098039215686275,0.050980392156862786,0.2745098039215687,0.15294117647058814,-0.4431372549019609,-0.8235294117647058,-1.5333333333333332,-1.392156862745098,-0.09411764705882353,0.8980392156862745,1.7019607843137254,1.1333333333333333,-5.551115123125783e-17,-0.050980392156862564,-1.0627450980392155,-1.9803921568627452,-0.7176470588235294,0,0,0.10588235294117647,0.8392156862745098,1.9843137254901961,1.1803921568627451,-0.17254901960784302,-0.36470588235294105,0.13725490196078433,-0.07450980392156864,0.08235294117647068,0.44705882352941184,0.019607843137254832,-0.8627450980392158,-1.5411764705882354,-1.5254901960784313,-0.5098039215686274,0.5137254901960784,1.4352941176470588,1.2196078431372548,0.48235294117647065,0.11372549019607842,0.2784313725490197,-0.3607843137254902,-2.0156862745098043,-1.4862745098039214,-0.1803921568627451,0,0,0.2588235294117647,1.7333333333333334,1.6549019607843138,0.07058823529411751,-0.11764705882352922,0.26274509803921564,-0.06666666666666665,-0.027450980392156654,0.45882352941176485,-0.14509803921568631,-1.5725490196078433,-1.7098039215686274,-0.8784313725490196,0.09803921568627451,1.1686274509803922,1.564705882352941,0.42745098039215684,0.11372549019607847,0.29019607843137246,0.18431372549019615,-0.1529411764705882,-1.1686274509803922,-1.6745098039215685,-0.8588235294117648,-0.058823529411764705,0,0.027450980392156862,0.7686274509803922,1.6431372549019607,0.9294117647058824,0.34509803921568627,0.27843137254901956,-0.0666666666666666,0.1254901960784316,0.40392156862745104,-0.7568627450980393,-2.0313725490196077,-1.1686274509803922,-0.2196078431372549,0.6588235294117647,1.5960784313725491,1.207843137254902,0.04705882352941171,0.07843137254901955,0.23921568627450984,-0.12941176470588217,-0.050980392156862675,-0.12941176470588234,-1.4862745098039216,-1.6862745098039216,-0.34509803921568627,0,0,0.12549019607843137,1,1.4823529411764707,0.9411764705882353,0.3254901960784314,-0.06666666666666671,-0.17254901960784302,-0.09019607843137256,-1.0431372549019609,-1.615686274509804,-0.43529411764705883,0,0.8235294117647058,1.411764705882353,0.8784313725490197,0.4745098039215687,0.26274509803921553,0.027450980392156765,-0.13725490196078416,-0.12549019607843126,-0.27450980392156865,-1.2745098039215685,-1.5529411764705883,-0.5137254901960784,0,0,0,0.3019607843137255,1.0666666666666667,1.0745098039215688,0.5254901960784314,0.4549019607843136,-1.1647058823529413,-0.8313725490196079,-0.47058823529411764,-0.5411764705882353,-0.06274509803921569,-0.00392156862745098,0.32941176470588235,0.615686274509804,0.7882352941176471,1.4549019607843139,0.6784313725490195,-0.05882352941176483,0.17254901960784302,-0.8235294117647057,-1.388235294117647,-0.9607843137254902,-0.580392156862745,-0.22745098039215686,0,0,0,0.03137254901960784,0.2980392156862745,0.4745098039215686,0.4980392156862745,1.3215686274509804,-1.3137254901960784,-0.7450980392156863,0.035294117647058865,0.04705882352941182,-0.07058823529411767,-0.027450980392156876,0.05882352941176472,0.11764705882352944,0.615686274509804,1.3137254901960782,0.7019607843137255,-0.0549019607843137,0.15294117647058814,-0.980392156862745,-1.4666666666666668,-0.3490196078431371,0.047058823529411764,-0.09803921568627455,-0.0431372549019608,-0.019607843137254888,-0.19999999999999996,0.1843137254901961,0.14901960784313723,-0.09411764705882358,0.2705882352941177,1.3392156862745098]
		this.adata = new Array(13 * 13)
		this.updateCurrentData()
		this.update()

	}

	update(){

		requestAnimationFrame(_=>{this.update()})

		this.ctx.clearRect(0, 0, this.w, this.h)

		this.f += this.df
		if (this.f >= 1) {
			this.f = 0
			this.adata = new Array(13 * 13)
		}

		if (this.updateFramePosition()) this.updateCurrentData()


		this.drawOriginal()
		this.drawAveraged()
		// this.drawKernel()
		this.drawIntermediate()
		this.drawFrame()

	}

	updateCurrentData(){

		this.adata[this.frame.x / 2 + this.frame.y / 2 * 13 - 1] = this.average
		
		this.originalPixels = [
			this.data[this.frame.y * 26 + this.frame.x],
			this.data[this.frame.y * 26 + this.frame.x + 1],
			// this.data[this.frame.y * 26 + this.frame.x + 2],
			this.data[this.frame.y * 26 + this.frame.x + 26],
			this.data[this.frame.y * 26 + this.frame.x + 27],
			// this.data[this.frame.y * 26 + this.frame.x + 28],
			// this.data[this.frame.y * 26 + this.frame.x + 52],
			// this.data[this.frame.y * 26 + this.frame.x + 53],
			// this.data[this.frame.y * 26 + this.frame.x + 54]
		]

		this.average = this.originalPixels.reduce((a,v)=>a+v) / 4
		

	}

	updateFramePosition(){

		let changed = false

		const p = this.f * 169
		const x = Math.floor(p % 13) * 2
		const y = Math.floor(p / 13) * 2

		this.subf = p % 13 % 1
		// this.subf = -Math.cos((p % 26 % 1) * Math.PI) * .5 + .5

		if (this.frame.x !== x) changed = true

		this.frame.x = x
		this.frame.y = y

		return changed

	}


	drawIntermediate(){

		let scale = this.inter.s
		const position = [this.inter.x, this.inter.y]
		let margin = this.ratio * .2
		let delta = this.field.cellSize

		if (this.subf < .25){

			// const f = this.subf / .2
			const f = -Math.cos((this.subf / .25) * Math.PI) * .5 + .5
			scale = 1 + f * (this.inter.s - 1)
			
			const p1x = this.field.x + this.field.cellSize * this.frame.x
			const p1y = this.field.y + this.field.cellSize * this.frame.y

			position[0] = p1x + (position[0] - p1x) * f
			position[1] = p1y + (position[1] - p1y) * f
			margin = margin * f

		} else if (this.subf < .5){

			const f = -Math.cos(((this.subf - .25) / .25) * Math.PI) * .5 + .5
			position[0] = position[0] + (this.inter.x1 - position[0]) * f
			position[1] = position[1] + (this.inter.y1 - position[1]) * f
			delta = this.field.cellSize * (1 - f)

		} else if (this.subf < .75){

			const f = -Math.cos(((this.subf - .5) / .25) * Math.PI) * .5 + .5
			const p1x = this.inter.x1
			const p1y = this.inter.y1
			const p2x = this.field2.x + this.field.cellSize * this.frame.x / 2
			const p2y = this.field2.y + this.field.cellSize * this.frame.y / 2

			position[0] = p1x + (p2x - p1x) * f
			position[1] = p1y + (p2y - p1y) * f

			scale = 1 + (scale - 1) * (1 - f)
			delta = 0
			margin = 0

		} else {

			position[0] = this.field2.x + this.field.cellSize * this.frame.x / 2
			position[1] = this.field2.y + this.field.cellSize * this.frame.y / 2

			scale = 1
			delta = 0
			margin = 0

		}

		const colors = []
		for (let i = 0; i < this.originalPixels.length; i++){
			if (this.subf < .25){
				colors[i] = this.originalPixels[i] >= 0 ? this.plusMap.rgb(this.originalPixels[i] / 2) : this.minusMap.rgb(-this.originalPixels[i] / 2)
			} else if (this.subf < .5){
				const f = (this.subf - .25) / .25
				const c1 = this.originalPixels[i] >= 0 ? this.plusMap.rawrgb(this.originalPixels[i] / 2) : this.minusMap.rawrgb(-this.originalPixels[i] / 2)
				const c2 = this.average >= 0 ? this.plusMap.rawrgb(this.average/2) : this.minusMap.rawrgb(-this.average/2)
				colors[i] = `rgb(${c1[0] + (c2[0] - c1[0]) * f}, ${c1[1] + (c2[1] - c1[1]) * f}, ${c1[2] + (c2[2] - c1[2]) * f})`
			} else {
				colors[i] = this.average >= 0 ? this.plusMap.rgb(this.average/2) : this.minusMap.rgb(-this.average/2)
			}
		}

		this.ctx.save()
		this.ctx.translate(position[0], position[1])
		this.ctx.scale(scale, scale)

		this.ctx.fillStyle = colors[0]
		this.ctx.fillRect(0, 0, this.field.cellSize, this.field.cellSize)
		this.ctx.fillStyle = colors[1]
		this.ctx.fillRect(delta + margin, 0, this.field.cellSize, this.field.cellSize)
		// this.ctx.fillStyle = colors[2]
		// this.ctx.fillRect(delta * 2 + margin * 2, 0, this.field.cellSize, this.field.cellSize)

		this.ctx.fillStyle = colors[2]
		this.ctx.fillRect(0, delta + margin, this.field.cellSize, this.field.cellSize)
		this.ctx.fillStyle = colors[3]
		this.ctx.fillRect(delta + margin, delta + margin, this.field.cellSize, this.field.cellSize)
		// this.ctx.fillStyle = colors[5]
		// this.ctx.fillRect(delta * 2 + margin * 2, delta + margin, this.field.cellSize, this.field.cellSize)

		// this.ctx.fillStyle = colors[6]
		// this.ctx.fillRect(0, delta * 2 + margin * 2, this.field.cellSize, this.field.cellSize)
		// this.ctx.fillStyle = colors[7]
		// this.ctx.fillRect(delta + margin, delta * 2 + margin * 2, this.field.cellSize, this.field.cellSize)
		// this.ctx.fillStyle = colors[8]
		// this.ctx.fillRect(delta * 2 + margin * 2, delta * 2 + margin * 2, this.field.cellSize, this.field.cellSize)


		//TEXT
		const texts = []
		for (let i = 0; i < this.originalPixels.length; i++){
			if (this.subf < .25){
				texts[i] = this.originalPixels[i].toFixed(1)
			} else if (this.subf < .5){
				const f = (this.subf - .2) / .2
				const t1 = this.originalPixels[i]
				const t2 = this.originalPixels[i] / 9
				texts[i] = (t1 + (t2 - t1) * f).toFixed(1)
			} else if (this.subf < .75){
				texts[i] = i===0 ? this.average.toFixed(1) : ``
			} else {
				texts[i] = ``
			}
		}
		const h = this.field.cellSize / 2
		this.ctx.fillStyle = `#6F9`
		this.ctx.fillText(texts[0], h, h)
		this.ctx.fillText(texts[1], h + delta + margin, h)
		// this.ctx.fillText(texts[2], h + delta * 2 + margin * 2, h)

		this.ctx.fillText(texts[2], h, h + delta + margin)
		this.ctx.fillText(texts[3], h + delta + margin, h + delta + margin)
		// this.ctx.fillText(texts[5], h + delta * 2 + margin * 2, h + delta + margin)

		// this.ctx.fillText(texts[6], h, h + delta * 2 + margin * 2)
		// this.ctx.fillText(texts[7], h + delta + margin, h + delta * 2 + margin * 2)
		// this.ctx.fillText(texts[8], h + delta * 2 + margin * 2, h + delta * 2 + margin * 2)

		this.ctx.restore()


		//Happening text
		this.ctx.save()
		this.ctx.font = 16*this.ratio + `px Tahoma`
		this.ctx.translate(this.w/2, this.ratio * 56)
		this.ctx.fillStyle = `#000`
		this.ctx.fillText(this.subf < .25 ? `Reading pixels` : this.subf < .5  ? `Averaging values` : this.subf < .75 ? `Writing the average to the filtered image` : `Moving to the neighbouring pixels`, 0, 0)
		this.ctx.restore()
		
		

	}

	drawOriginal(){
		if (this.originalPixelsImage){
			this.ctx.drawImage(this.originalPixelsImage, this.field.x, this.field.y)
		} else {
			this.originalPixelsImage = document.createElement(`canvas`)
			this.originalPixelsImage.width = this.field.cellSize * 26
			this.originalPixelsImage.height = this.field.cellSize * 26
			const ctx = this.originalPixelsImage.getContext(`2d`)

			for (let i = 0; i < this.data.length; i++){

				const d = this.data[i]
				const x = i % 26
				const y = Math.floor(i / 26)

				ctx.fillStyle = d >= 0 ? this.plusMap.rgb(d / 2) : this.minusMap.rgb(-d / 2)
				ctx.fillRect(this.field.cellSize * x, this.field.cellSize * y, this.field.cellSize, this.field.cellSize)

			}
		}
	}

	drawAveraged(){
		for (let i = 0; i < this.adata.length; i++){

			const d = this.adata[i]
			const x = i % 13
			const y = Math.floor(i / 13)

			this.ctx.fillStyle = d === undefined ? `#FFF` : d >= 0 ? this.plusMap.rgb(d/2) : this.minusMap.rgb(-d/2)
			this.ctx.fillRect(this.field2.x + this.field2.cellSize * x, this.field2.y + this.field2.cellSize * y, this.field2.cellSize, this.field2.cellSize)
		}
	}

	drawFrame(){

		this.ctx.strokeStyle = `#6F9`
		let notchx = 0
		let notchy = 0
		if (this.subf > .75){
			if (this.frame.x === 24) {
				const f = (this.subf - .75) / .25
				notchx = f * -this.field.cellSize * 24
				notchy = f * this.field.cellSize * 2
			} else {
				notchx = (this.subf - .75) / .25 * this.field.cellSize * 2
			}
		}

		for (let x = 0; x < 3; x++){

			this.ctx.beginPath()
			this.ctx.moveTo(this.field.x + this.field.cellSize * this.frame.x + this.field.cellSize * x + notchx, this.field.y + this.field.cellSize * this.frame.y + notchy)
			this.ctx.lineTo(this.field.x + this.field.cellSize * this.frame.x + this.field.cellSize * x + notchx, this.field.y + this.field.cellSize * (this.frame.y + 2) + notchy)
			this.ctx.stroke()

		}

		for (let y = 0; y < 3; y++){

			this.ctx.beginPath()
			this.ctx.moveTo(this.field.x + this.field.cellSize * this.frame.x + notchx, this.field.y + this.field.cellSize * this.frame.y + this.field.cellSize * y + notchy)
			this.ctx.lineTo(this.field.x + this.field.cellSize * (this.frame.x + 2) + notchx, this.field.y + this.field.cellSize * this.frame.y + this.field.cellSize * y + notchy)
			this.ctx.stroke()

		}

	}

}


